{"meta":{"title":"辛巴成长记","subtitle":"little Simba","description":"Simba Growing Diary","author":"lvxiaohai99","url":"http://yoursite.com"},"pages":[{"title":"吕思远","date":"2018-11-27T00:44:37.000Z","updated":"2018-11-27T06:03:15.089Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"吕思远，2018-07-25 出生于北京，小名：辛巴。"},{"title":"categories","date":"2018-11-27T00:54:28.000Z","updated":"2018-11-27T00:54:28.482Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-11T02:40:49.386Z","updated":"2018-04-18T08:54:17.000Z","comments":true,"path":"note/EclipseImport.html","permalink":"http://yoursite.com/note/EclipseImport.html","excerpt":"","text":"Eclipse导入步骤下载项目Download Zip或者 git clone1git clone https://github.com/Sunybyjava/seckill.git 在Eclipse中导入项目 点击菜单栏上的File&gt;Import,选择Existing Projects into Workspace 选择你的项目地址,然后点导入 这时项目应该成功地导入了,注意查看JDK版本,我这里是Open JDK1.8,这里你是Oracle JDK还是Open JDK都好,必须是1.8 更改项目的编译等级,这一步很重要,否则项目编译失败 设置Maven的目录,如果你配置了环境变量的话,默认这个就是选好了这个目录的 更改你Maven仓库的目录以及配置文件,这里是你可以不配也可与配置,不过如果你又本地仓库的话建议你配置,本地仓库存在Jar包的话很多时候就不用联网下载了,如果你不清楚配置的话请让它默认,建议了解Maven的基础知识后再去更改,不更改的话也可以正常运行 更改项目的JDK,在项目文件名上右键Build Path&gt;Configure Build Path,出现项目设置页面可以看到我这里就是1.8的,所以我就不用改了 更改本项目的编译等级,很重要,这里先勾选Enable project specific settings 更改项目的编码以及换行符 标记为动态WEB工程 把项目转换成Maven项目,貌似Eclipse还不认识,在项目上右键Configure&gt;Convert to Maven Project,然后稍等一会儿项目结构会发生点变化 更新Maven索引,在项目上右键,选择Maven&gt;Update Project,或者是按快捷键ALT+F5,然后会弹出界面来选择要更新的项目 更新索引后,可以看到这里的资源没有红色了,如果没有这一步的话资源就是红色的 安装Maven项目,在项目点击右键Run&gt;Maven Install我这里安装就报错了,因为连接不到数据库,所以你要先建立数据库表,然后更改数据库配置文件,配置文件位于src/main/resources/jdbc.properties,根据自己的情况酌情修改导入数据库后,再进行安装就应该不会报错了 添加可以部署项目的Web容器,这里添加Tomcat 选择合适的版本进行添加 选取Tomcat的路径 修改Tomcat的部署路径,这一部很重要,在MyEclipse中不会发生这个问题,原因就是因为Eclipse部署的项目默认实在软件目录下的.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp1\\wtpwebapps下面,这样就造成你在Eclipse是可以访问到项目的,但是你在浏览器里面是访问不到这个项目的,这样肯定是不方便的。 修改步骤,前提是要在关闭Tomcat的前提下,否则你更改不了这个 找到servers location，选择第二个User tomcat Installation 还要修改deploy path为webapps修改前：修改后：不要忘记保存这个设置,否则不生效的 运行项目 把项目添加到Tomcat服务器 运行效果"},{"title":"archives","date":"2018-12-12T06:17:32.000Z","updated":"2018-12-12T06:17:33.028Z","comments":true,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-11T02:40:49.403Z","updated":"2018-04-18T08:54:17.000Z","comments":true,"path":"note/share.html","permalink":"http://yoursite.com/note/share.html","excerpt":"","text":"这里先总结出网友总结出的一些坑 @Resource，使用报错引用import javax.annotation.Resource mybatis里面mapper映射的sql，如果要加单行注释的话，一定要在–后面跟一个空格 最好在jdbc.properties中需要修改前面加个前缀jdbc。防止与全局变量冲突+下次有问题一定要先看一下评论！！！create不了的同学，可以这样写：start_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘秒杀开始时间’,end_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘秒杀结束时间’,create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’, 关于timestamp的问题，需要先运行 set explicit_defaults_for_timestamp = 1，否则会报invalid default value错误 还需要注意的是SQL版本的问题会导致视频中seckill表创建会出错。只要将create_time放在start_time和end_time之前是方便的解决方法。 开始就觉得奇怪，bitint是什么鬼。难道老师是故意把bigint写错成bitint，然后展示如何排错 mysql 5.7中，默认使用的是严格模式,这里的日期必须要有时间+参考链接Invalid default value for ‘create_date’ timestamp field mysql官方MySQL Community 5.7 - Invalid default value (datetime field type) ++ 查询数据库的版本方式 select version(); select @@version; 1WARN: Establishing SSL connection without server&apos;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&apos;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &apos;false&apos;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. $useSSL=false"},{"title":"schedule","date":"2018-11-27T02:18:59.000Z","updated":"2018-11-27T02:18:59.610Z","comments":true,"path":"schedule/index.html","permalink":"http://yoursite.com/schedule/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-11T02:40:49.401Z","updated":"2018-04-18T08:54:17.000Z","comments":true,"path":"note/note4.html","permalink":"http://yoursite.com/note/note4.html","excerpt":"","text":"(四)Java高并发秒杀API之高并发优化下载Redis 下载完后解压压缩包 进入解压后的文件夹里面 ,执行命令 make 然后再执行sudo make install 最后再启动REdis,启动命令为redis-server 执行命令’redis-cli -p 6379’查看运行情况 使用Java操作Redis 导入操作Redis的jedis的 jar包 12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt; 添加protostuff-core以及protostuff-runtime序列化jar包 12345678910&lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; 在com.suny.dao下建包cache 然后建立类RedisDao1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * 操作Redis的dao类 * Created by 孙建荣 on 17-5-27.下午4:44 */public class RedisDao &#123; private final Logger logger = LoggerFactory.getLogger(this.getClass()); private final JedisPool jedisPool; private RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class); public RedisDao(String ip, int port) &#123; jedisPool = new JedisPool(ip, port); &#125; public Seckill getSeckill(long seckillId) &#123; // redis操作业务逻辑 try (Jedis jedis = jedisPool.getResource()) &#123; String key = \"seckill:\" + seckillId; // 并没有实现内部序列化操作 //get-&gt;byte[]字节数组-&gt;反序列化&gt;Object(Seckill) // 采用自定义的方式序列化 // 缓存获取到 byte[] bytes = jedis.get(key.getBytes()); if (bytes != null) &#123; // 空对象 Seckill seckill = schema.newMessage(); ProtostuffIOUtil.mergeFrom(bytes, seckill, schema); // seckill被反序列化 return seckill; &#125; &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); &#125; return null; &#125; public String putSeckill(Seckill seckill) &#123; // set Object(Seckill) -&gt; 序列化 -&gt; byte[] try (Jedis jedis = jedisPool.getResource()) &#123; String key = \"seckill:\" + seckill.getSeckillId(); byte[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE)); // 超时缓存 int timeout=60*60; return jedis.setex(key.getBytes(), timeout, bytes); &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); &#125; return null; &#125;&#125; 下一步是在在applicationContext-dao.xml中注入redisDao 123456&lt;!--注入redisDao--&gt; &lt;bean id=\"redisDao\" class=\"com.suny.dao.cache.RedisDao\"&gt; &lt;!--构造方法注入值--&gt; &lt;constructor-arg index=\"0\" value=\"localhost\"/&gt; &lt;constructor-arg index=\"1\" value=\"6379\"/&gt; &lt;/bean&gt; 改造exportSeckillUrl方法,一定要先注入redisDao 123456789101112131415161718192021222324252627282930313233343536373839 @Autowired private RedisDao redisDao;@Override public Exposer exportSeckillUrl(long seckillId) &#123; // 根据秒杀的ID去查询是否存在这个商品 /* Seckill seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; logger.warn(\"查询不到这个秒杀产品的记录\"); return new Exposer(false, seckillId); &#125;*/ Seckill seckill = redisDao.getSeckill(seckillId); if (seckill == null) &#123; // 访问数据库读取数据 seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; return new Exposer(false, seckillId); &#125; else &#123; // 放入redis redisDao.putSeckill(seckill); &#125; &#125; // 判断是否还没到秒杀时间或者是过了秒杀时间 LocalDateTime startTime = seckill.getStartTime(); LocalDateTime endTime = seckill.getEndTime(); LocalDateTime nowTime = LocalDateTime.now(); // 开始时间大于现在的时候说明没有开始秒杀活动 秒杀活动结束时间小于现在的时间说明秒杀已经结束了 if (nowTime.isAfter(startTime) &amp;&amp; nowTime.isBefore(endTime)) &#123; //秒杀开启,返回秒杀商品的id,用给接口加密的md5 String md5 = getMd5(seckillId); return new Exposer(true, md5, seckillId); &#125; return new Exposer(false, seckillId, nowTime, startTime, endTime); &#125; 写存储过程,然后去Mysql控制台执行储存过程 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758-- 秒杀执行储存过程DELIMITER $$ -- console ; 转换为$$-- 定义储存过程-- 参数： in 参数 out输出参数-- row_count() 返回上一条修改类型sql(delete,insert,update)的影响行数-- row_count:0:未修改数据 ; &gt;0:表示修改的行数； &lt;0:sql错误CREATE PROCEDURE `seckill`.`execute_seckill` (IN v_seckill_id BIGINT, IN v_phone BIGINT, IN v_kill_time TIMESTAMP, OUT r_result INT) BEGIN DECLARE insert_count INT DEFAULT 0; START TRANSACTION; INSERT IGNORE INTO success_killed (seckill_id, user_phone, create_time) VALUES (v_seckill_id, v_phone, v_kill_time); SELECT row_count() INTO insert_count; IF (insert_count = 0) THEN ROLLBACK; SET r_result = -1; ELSEIF (insert_count &lt; 0) THEN ROLLBACK; SET r_result = -2; ELSE UPDATE seckill SET number = number - 1 WHERE seckill_id = v_seckill_id AND end_time &gt; v_kill_time AND start_time &lt; v_kill_time AND number &gt; 0; SELECT row_count() INTO insert_count; IF (insert_count = 0) THEN ROLLBACK; SET r_result = 0; ELSEIF (insert_count &lt; 0) THEN ROLLBACK; SET r_result = -2; ELSE COMMIT; SET r_result = 1; END IF; END IF; END;$$-- 储存过程定义结束DELIMITER ;SET @r_result = -3;-- 执行储存过程CALL execute_seckill(1003, 13502178891, now(), @r_result);-- 获取结果SELECT @r_result; 在SeckillMapper中编写killProduce()方法 12345/** * 使用储存过程执行秒杀 * @param paramMap */ void killByProcedure(Map&lt;String,Object&gt; paramMap); 然后在SeckillMapper.xml中写sql语句 123456789&lt;!--调用储存过程--&gt; &lt;select id=\"killByProcedure\" statementType=\"CALLABLE\"&gt; CALL execute_seckill( #&#123;seckillId,jdbcType=BIGINT,mode=IN&#125;, #&#123;phone,jdbcType=BIGINT,mode=IN&#125;, #&#123;killTime,jdbcType=TIMESTAMP,mode=IN&#125;, #&#123;result,jdbcType=INTEGER,mode=OUT&#125; ) &lt;/select&gt; 下一步在SeckillService接口中中编写 killProduce()方法 1SeckillExecution executeSeckillProcedure(long seckillId,long userPhone,String md5); 导入commons-collections工具类 123456&lt;!--导入apache工具类--&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt; 然后SeckillServiceImpl实现killProduce()方法 123456789101112131415161718192021222324252627@Override public SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5) &#123; if (md5 == null || !md5.equals(getMd5(seckillId))) &#123; return new SeckillExecution(seckillId, SeckillStatEnum.DATE_REWRITE); &#125; LocalDateTime killTime = LocalDateTime.now(); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"seckillId\", seckillId); map.put(\"phone\", userPhone); map.put(\"killTime\", killTime); map.put(\"result\", null); // 执行储存过程,result被复制 try &#123; seckillMapper.killByProcedure(map); // 获取result int result = MapUtils.getInteger(map, \"result\", -2); if (result == 1) &#123; SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone); return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled); &#125; else &#123; return new SeckillExecution(seckillId, SeckillStatEnum.stateOf(result)); &#125; &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); return new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); &#125; &#125; 改造执行秒杀executeSeckill方法,减少一道虚拟机GC程序,优化性能 12345678910111213141516171819202122232425262728293031323334@Transactional @Override public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException &#123; if (md5 == null || !md5.equals(getMd5(seckillId))) &#123; logger.error(\"秒杀数据被篡改\"); throw new SeckillException(\"seckill data rewrite\"); &#125; // 执行秒杀业务逻辑 LocalDateTime nowTIme = LocalDateTime.now(); try &#123; // 记录购买行为 int insertCount = successKilledMapper.insertSuccessKilled(seckillId, userPhone); if (insertCount &lt;= 0) &#123; // 重复秒杀 throw new RepeatKillException(\"seckill repeated\"); &#125; else &#123; // 减库存 ,热点商品的竞争 int reduceNumber = seckillMapper.reduceNumber(seckillId, nowTIme); if (reduceNumber &lt;= 0) &#123; logger.warn(\"没有更新数据库记录,说明秒杀结束\"); throw new SeckillCloseException(\"seckill is closed\"); &#125; else &#123; // 秒杀成功了,返回那条插入成功秒杀的信息 进行commit SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone); return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled); &#125; &#125; &#125; catch (SeckillCloseException | RepeatKillException e1) &#123; throw e1; &#125; &#125; 编写SeckillServiceImpl中的killProduce()方法的测试方法 123456789101112@Test public void executeSeckillProcedureTest() &#123; long seckillId = 1001; long phone = 1368011101; Exposer exposer = seckillService.exportSeckillUrl(seckillId); if (exposer.isExposed()) &#123; String md5 = exposer.getMd5(); SeckillExecution execution = seckillService.executeSeckillProcedure(seckillId, phone, md5); System.out.println(execution.getStateInfo()); &#125; &#125; 改造SeckillController中的execute方法调用,把一开始调用普通方法的改成调用储存过程的那个方法 12345678910111213141516171819202122232425262728293031 @RequestMapping(value = \"/&#123;seckillId&#125;/&#123;md5&#125;/execution\", method = RequestMethod.POST) @ResponseBody public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(\"seckillId\") long seckillId, @PathVariable(\"md5\") String md5, @CookieValue(value = \"userPhone\", required = false) Long userPhone) &#123; // 如果用户的手机号码为空的说明没有填写手机号码进行秒杀 if (userPhone == null) &#123; return new SeckillResult&lt;&gt;(false, \"没有注册\"); &#125; // 根据用户的手机号码,秒杀商品的id跟md5进行秒杀商品,没异常就是秒杀成功 try &#123; // 这里换成储存过程// SeckillExecution execution = seckillService.executeSeckill(seckillId, userPhone, md5); SeckillExecution execution = seckillService.executeSeckillProcedure(seckillId, userPhone, md5); return new SeckillResult&lt;&gt;(true, execution); &#125; catch (RepeatKillException e1) &#123; // 重复秒杀 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillCloseException e2) &#123; // 秒杀关闭 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillException e) &#123; // 不能判断的异常 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); return new SeckillResult&lt;&gt;(false, execution); &#125; // 如果有异常就是秒杀失败 &#125; 上一篇 (三)Java高并发秒杀API之web层 (一)Java高并发秒杀API之业务分析与DAO层 (二)Java高并发秒杀API之Service层 如果项目流程总结中有什么问题欢迎发Issue给我,或者您也可以直接联系我`sunybyjava@gmail.com`,感谢您的阅读"},{"title":"tags","date":"2018-11-27T00:53:54.000Z","updated":"2018-11-27T00:53:54.741Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-12-11T02:40:49.399Z","updated":"2018-04-18T08:54:17.000Z","comments":true,"path":"note/note3.html","permalink":"http://yoursite.com/note/note3.html","excerpt":"","text":"(三)Java高并发秒杀系统API之Web层开发既然是Web层的会肯定要先引入SpringMvc了 修改web.xml,引入SpringMvc的DispatcherServlet：1234567891011121314151617181920212223242526&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\" metadata-complete=\"true\"&gt; &lt;!--用maven创建的web-app需要修改servlet的版本为3.0--&gt; &lt;servlet&gt; &lt;servlet-name&gt;seckill-dispatchServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!--配置springmvc的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt; 1 &lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;seckill-dispatchServlet&lt;/servlet-name&gt; &lt;!--直接拦截所有请求,不再采用spring2.0的/*或者*.do方式--&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在这里的话如果你不配置这一段代码的：12345&lt;!--配置springmvc的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/init-param&gt; SpringMvc默认就会默认去WEB-INF下查找默认规范的配置文件,像我这里配置的servlet-name是seckill-dispatchServlet的话,则默认会寻找WEB-INF一个名为seckill-dispatchServlet-Servlet.xml的配置文件 接下来编写Controller SeckillController首先在com.suny下建立包为Controller的包,然后在里面新建一个类SeckillController：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114package com.suny.controller;/** * Created by 孙建荣 on 17-5-24.下午10:11 */@Controller@RequestMapping(\"/seckill\")public class SeckillController &#123; private final SeckillService seckillService; @Autowired public SeckillController(SeckillService seckillService) &#123; this.seckillService = seckillService; &#125; /** * 进入秒杀列表. * * @param model 模型数据,里面放置有秒杀商品的信息 * @return 秒杀列表详情页面 */ @RequestMapping(value = \"/list\", method = RequestMethod.GET) public String list(Model model) &#123; List&lt;Seckill&gt; seckillList = seckillService.getSeckillList(); model.addAttribute(\"list\", seckillList); return \"list\"; &#125; @RequestMapping(value = \"/&#123;seckillId&#125;/detail\", method = RequestMethod.GET) public String detail(@PathVariable(\"seckillId\") Long seckillId, Model model) &#123; if (seckillId == null) &#123; return \"redirect:/seckill/list\"; &#125; Seckill seckill = seckillService.getById(seckillId); if (seckill == null) &#123; return \"forward:/seckill/list\"; &#125; model.addAttribute(\"seckill\", seckill); return \"detail\"; &#125; /** * 暴露秒杀接口的方法. * * @param seckillId 秒杀商品的id * @return 根据用户秒杀的商品id进行业务逻辑判断,返回不同的json实体结果 */ @RequestMapping(value = \"/&#123;seckillId&#125;/exposer\", method = RequestMethod.GET) @ResponseBody public SeckillResult&lt;Exposer&gt; exposer(@PathVariable(\"seckillId\") Long seckillId) &#123; // 查询秒杀商品的结果 SeckillResult&lt;Exposer&gt; result; try &#123; Exposer exposer = seckillService.exportSeckillUrl(seckillId); result = new SeckillResult&lt;&gt;(true, exposer); &#125; catch (Exception e) &#123; e.printStackTrace(); result = new SeckillResult&lt;&gt;(false, e.getMessage()); &#125; return result; &#125; /** * 用户执行秒杀,在页面点击相应的秒杀连接,进入后获取对应的参数进行判断,返回相对应的json实体结果,前端再进行处理. * * @param seckillId 秒杀的商品,对应的时秒杀的id * @param md5 一个被混淆的md5加密值 * @param userPhone 参与秒杀用户的额手机号码,当做账号密码使用 * @return 参与秒杀的结果,为json数据 */ @RequestMapping(value = \"/&#123;seckillId&#125;/&#123;md5&#125;/execution\", method = RequestMethod.POST) @ResponseBody public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(\"seckillId\") long seckillId, @PathVariable(\"md5\") String md5, @CookieValue(value = \"userPhone\", required = false) Long userPhone) &#123; // 如果用户的手机号码为空的说明没有填写手机号码进行秒杀 if (userPhone == null) &#123; return new SeckillResult&lt;&gt;(false, \"没有注册\"); &#125; // 根据用户的手机号码,秒杀商品的id跟md5进行秒杀商品,没异常就是秒杀成功 try &#123; // 这里换成储存过程 SeckillExecution execution = seckillService.executeSeckill(seckillId, userPhone, md5); return new SeckillResult&lt;&gt;(true, execution); &#125; catch (RepeatKillException e1) &#123; // 重复秒杀 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillCloseException e2) &#123; // 秒杀关闭 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillException e) &#123; // 不能判断的异常 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); return new SeckillResult&lt;&gt;(false, execution); &#125; // 如果有异常就是秒杀失败 &#125; /** * 获取服务器端时间,防止用户篡改客户端时间提前参与秒杀 * * @return 时间的json数据 */ @RequestMapping(value = \"/time/now\", method = RequestMethod.GET) @ResponseBody public SeckillResult&lt;LocalDateTime&gt; time() &#123; LocalDateTime localDateTime = LocalDateTime.now(); return new SeckillResult&lt;&gt;(true, localDateTime); &#125;&#125; 建立一个全局ajax请求返回类,返回json类型SeckillResult: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.suny.dto;/** * 封装所有的ajax请求返回类型,方便返回json * Created by 孙建荣 on 17-5-24.下午10:18 */public class SeckillResult&lt;T&gt; &#123; private boolean success; private T data; private String error; public SeckillResult() &#123; &#125; public SeckillResult(boolean success, T data) &#123; this.success = success; this.data = data; &#125; public SeckillResult(boolean success, String error) &#123; this.success = success; this.error = error; &#125; public boolean isSuccess() &#123; return success; &#125; public void setSuccess(boolean success) &#123; this.success = success; &#125; public T getData() &#123; return data; &#125; public void setData(T data) &#123; this.data = data; &#125; public String getError() &#123; return error; &#125; public void setError(String error) &#123; this.error = error; &#125; @Override public String toString() &#123; return \"SeckillResult&#123;\" + \"状态=\" + success + \", 数据=\" + data + \", 错误消息='\" + error + '\\'' + '&#125;'; &#125;&#125; 页面的编写因为项目的前端页面都是由Bootstrap开发的,所以我们要先去下载Bootstrap或者是使用在线的CDN. -Bootstrap中文官网 -Bootstrap中文文档 使用在线CDN引入的方法: 12345678&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"&gt;&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; 文档里面写的很详细,然后我这里是使用离线版本的,方便我们本地调试,避免出现什么别的因素干扰我们: 首先下载JQuery,因为Bootstrap就是依赖JQuery的 然后下载Bootstrap 然后下载一个倒计时插件jquery.countdown.min.js-再下载一个操作Cookie插件jquery.cookie.min.js如图放置: 首先编写一个公共的头部jsp文件,位于WEB-INF下common中的head.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;&lt;meta charset=\"utf-8\"&gt;&lt;link rel=\"stylesheet\" href=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/css/bootstrap.min.css\" type=\"text/css\"&gt;&lt;link rel=\"stylesheet\" href=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/css/bootstrap-theme.min.css\" type=\"text/css\"&gt; ```` - 然后编写一个公共的`jstl`标签库文件,位于`WEB-INF`下`common`中的`tag.jsp` ```jsp&lt;%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %&gt;``` - 编写列表页面,位于`WEB-INF`下`common`中的`list.jsp` ````jsp &lt;%@page contentType=\"text/html; charset=UTF-8\" language=\"java\" %&gt; &lt;%@include file=\"common/tag.jsp\" %&gt; &lt;!DOCTYPE html&gt; &lt;html lang=\"zh-CN\"&gt; &lt;head&gt; &lt;title&gt;秒杀列表&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading text-center\"&gt; &lt;h2&gt;秒杀列表&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;table class=\"table table-hover\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;名称&lt;/td&gt; &lt;td&gt;库存&lt;/td&gt; &lt;td&gt;开始时间&lt;/td&gt; &lt;td&gt;结束时间&lt;/td&gt; &lt;td&gt;创建时间&lt;/td&gt; &lt;td&gt;详情页&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=\"$&#123;list&#125;\" var=\"sk\"&gt; &lt;tr&gt; &lt;td&gt;$&#123;sk.name&#125;&lt;/td&gt; &lt;td&gt;$&#123;sk.number&#125;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.startTime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.endTime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.createTIme&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=\"btn btn-info\" href=\"/seckill/$&#123;sk.seckillId&#125;/detail\" target=\"_blank\"&gt;详情&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt; &lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/html&gt; ` 编写列表页面,位于WEB-INF下common中的detail.jsp,秒杀详情页面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;%-- Created by IntelliJ IDEA. User: jianrongsun Date: 17-5-25 Time: 下午5:03 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;%@include file=\"common/tag.jsp\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;秒杀商品详情页面&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h1&gt;$&#123;seckill.name&#125;&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;h2 class=\"text-danger\"&gt; &lt;span class=\"glyphicon glyphicon-time\"&gt;&lt;/span&gt; &lt;span class=\"glyphicon\" id=\"seckill-box\"&gt;&lt;/span&gt; &lt;/h2&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=\"killPhoneModal\" class=\"modal fade\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h3 class=\"modal-title text-center\"&gt; &lt;span class=\"glyphicon glyphicon-phone\"&gt;&lt;/span&gt;秒杀电话: &lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-8 col-xs-offset-2\"&gt; &lt;input type=\"text\" name=\"killPhone\" id=\"killPhoneKey\" placeholder=\"填写手机号码\" class=\"form-control\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal-footer\"&gt; &lt;span id=\"killPhoneMessage\" class=\"glyphicon\"&gt;&lt;/span&gt; &lt;button type=\"button\" id=\"killPhoneBtn\" class=\"btn btn-success\"&gt; &lt;span class=\"glyphicon glyphicon-phone\"&gt;&lt;/span&gt; 提交 &lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.cookie.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.countdown.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/script/seckill.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function () &#123; var startTimeVal = \"$&#123;seckill.startTime.toLocalDate()&#125; \" + seckill.cloneZero(\"$&#123;seckill.startTime.toLocalTime()&#125;\"); var endTimeVal = \"$&#123;seckill.endTime.toLocalDate()&#125; \" + seckill.cloneZero(\"$&#123;seckill.endTime.toLocalTime()&#125;\"); console.log(\"startTimeVal========\" + startTimeVal); console.log(\"endTimeVal========\" + endTimeVal); // 传入参数 seckill.detail.init(&#123; seckillId:$&#123;seckill.seckillId&#125;, startTime: startTimeVal, endTime: endTimeVal &#125;) &#125;)&lt;/script&gt;&lt;/html&gt; 然后把项目运行一下我们又会碰到一个错误就是jstl中的fmt标签格式化时间只能格式化java.Util.Date类型的日期跟时间,而在我们这里我么使用了java8的LocalDateTIme,所以解析时间会出异常,这时我们应该想到自己去实现jstl标签来自定义解析这个时间日期自定义标签步骤如下: 在/WEB-INF创建目录 tags 然后创建一个文件localDateTime.tag 在tags目录下 localData.tag用来格式化日期 localDataTime.tag用来格式化日期跟时间的组合,也就是数据库中的Timestamp类型-然后在localDataTime.tag中写自己自定义的格式化流程12345678910111213141516171819202122232425262728293031&lt;%--格式化java8的LocalDatime,解决jstl不支持java8时间的问题--%&gt;&lt;%@ tag body-content=\"empty\" pageEncoding=\"UTF-8\" trimDirectiveWhitespaces=\"true\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %&gt;&lt;%-- 这里是定义页面使用标签中的属性设置,&lt;tags:localDataTime dateTime=\"$&#123;sk.createTIme&#125;\"/&gt; --%&gt;&lt;%@ attribute name=\"dateTime\" required=\"true\" type=\"java.time.LocalDateTime\" %&gt;&lt;%@ attribute name=\"pattern\" required=\"false\" type=\"java.lang.String\" %&gt;&lt;%--首选判断日期时间转换规则是否存在,不存在给出默认的规则--%&gt;&lt;c:if test=\"$&#123;empty pattern&#125;\"&gt; &lt;c:set var=\"pattern\" value=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/c:if&gt;&lt;c:set var=\"datetime\" value=\"$&#123;dateTime&#125;\"/&gt; &lt;%-- 获取jsp页面传入的【 日期时间 】,格式为【 2017-5-26T13:59:12 】 --%&gt;&lt;c:set var=\"time\" value=\"$&#123;fn:substringAfter(datetime, 'T')&#125;\"/&gt; &lt;%-- 获取页面传过来的【时间T】后面的 【 时:分:秒 】的值 --%&gt;&lt;c:set var=\"timeLength\" value=\"$&#123;fn:length(time)&#125;\"/&gt; &lt;%-- 获取页面传来的 【 时:分:秒 的长度 】 --%&gt;&lt;c:set var=\"generalLength\" value=\"$&#123;fn:length('123456')&#125;\"/&gt; &lt;%-- 这里定义了一个【Integer】类型的值,值为字符串 【123456 】的长度 --%&gt;&lt;c:set var=\"cloneZero\" value=\":00\"/&gt; &lt;%-- 这里设置一个值为【String】的字符串, --%&gt;&lt;%-- 当 时:分:秒 不足6位的时候就说明缺少秒,我们给它自动补充 :00 --%&gt;&lt;c:if test=\"$&#123;timeLength lt generalLength&#125;\"&gt; &lt;c:set var=\"datetimeCloneZero\" value=\"$&#123;datetime&#125;$&#123;cloneZero&#125;\"/&gt; &lt;%-- 拼接页面传过来的 【 时：分 】 ,补充一个【秒数】,EL中 + 为相加,非拼接字符串 --%&gt; &lt;c:set var=\"cleandDateTime\" value=\"$&#123;fn:replace(datetimeCloneZero,'T',' ')&#125;\"/&gt; &lt;%-- 把java8日期时间中的【 T 】给去掉,换成一个空的字符串 --%&gt;&lt;/c:if&gt;&lt;%-- 当页面传过来的时间大于6位时说明时间时完整的,不进行自动填充【 :00 】,直接把日期时间中的 【 T 】 替换为空字符串 --%&gt;&lt;c:if test=\"$&#123;timeLength gt generalLength&#125;\"&gt; &lt;c:set var=\"cleandDateTime\" value=\"$&#123;fn:replace(datetime,'T',' ')&#125;\"/&gt;&lt;/c:if&gt;&lt;%-- 解析时间, type=\"BOTH\"为同时解析日期跟时间 --%&gt;&lt;fmt:parseDate value=\"$&#123;cleandDateTime&#125;\" var=\"parsedDateTime\" pattern=\"$&#123;pattern&#125;\" type=\"BOTH\"/&gt;&lt;fmt:formatDate value=\"$&#123;parsedDateTime&#125;\" pattern=\"$&#123;pattern&#125;\" type=\"BOTH\"/&gt; localData.tag的内容就比较简单了 123456789101112&lt;%@ tag body-content=\"empty\" pageEncoding=\"UTF-8\" trimDirectiveWhitespaces=\"true\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ attribute name=\"date\" required=\"true\" type=\"java.time.LocalDate\" %&gt;&lt;%@ attribute name=\"pattern\" required=\"false\" type=\"java.lang.String\" %&gt;&lt;c:if test=\"$&#123;empty pattern&#125;\"&gt; &lt;c:set var=\"pattern\" value=\"MM/dd/yyyy\"/&gt;&lt;/c:if&gt;&lt;fmt:parseDate value=\"$&#123;date&#125;\" var=\"parsedDate\" type=\"date\"/&gt;&lt;fmt:formatDate value=\"$&#123;parsedDate&#125;\" type=\"date\" pattern=\"$&#123;pattern&#125;\"/&gt; 然后我们去页面导入需要的标签,然后去使用,修改list.jsp文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;%@page contentType=\"text/html; charset=UTF-8\" language=\"java\" %&gt;&lt;%@include file=\"common/tag.jsp\" %&gt; &lt;%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"&gt;&lt;head&gt; &lt;title&gt;秒杀列表&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading text-center\"&gt; &lt;h2&gt;秒杀列表&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;table class=\"table table-hover\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;名称&lt;/td&gt; &lt;td&gt;库存&lt;/td&gt; &lt;td&gt;开始时间&lt;/td&gt; &lt;td&gt;结束时间&lt;/td&gt; &lt;td&gt;创建时间&lt;/td&gt; &lt;td&gt;详情页&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=\"$&#123;list&#125;\" var=\"sk\"&gt; &lt;tr&gt; &lt;td&gt;$&#123;sk.name&#125;&lt;/td&gt; &lt;td&gt;$&#123;sk.number&#125;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.startTime&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.endTime&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.createTIme&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=\"btn btn-info\" href=\"/seckill/$&#123;sk.seckillId&#125;/detail\" target=\"_blank\"&gt;详情&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;/html&gt; 在这里我们修改了几个地方: 1&lt;%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %&gt; 123&lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.startTime&#125;\"/&gt;&lt;/td&gt;&lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.endTime&#125;\"/&gt;&lt;/td&gt;&lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.createTIme&#125;\"/&gt;&lt;/td&gt; 然后我们的格式就应该可以正常被格式化出来了 建立一个模块化的seckill.js文件,位于Webapp下 resources下script文件夹下,文件内容如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189/** * 模块化javaScript * Created by jianrongsun on 17-5-25. */var seckill = &#123; // 封装秒杀相关的ajax的url URL: &#123; now: function () &#123; return \"/seckill/time/now\"; &#125;, exposer: function (seckillId) &#123; return \"/seckill/\" + seckillId + \"/exposer\"; &#125;, execution: function (seckillId, md5) &#123; return \"/seckill/\" + seckillId + \"/\" + md5 + \"/execution\"; &#125; &#125;, // 验证手机号码 validatePhone: function (phone) &#123; return !!(phone &amp;&amp; phone.length === 11 &amp;&amp; !isNaN(phone)); &#125;, // 详情页秒杀业务逻辑 detail: &#123; // 详情页开始初始化 init: function (params) &#123; console.log(\"获取手机号码\"); // 手机号验证登录,计时交互 var userPhone = $.cookie('userPhone'); // 验证手机号 if (!seckill.validatePhone(userPhone)) &#123; console.log(\"未填写手机号码\"); // 验证手机控制输出 var killPhoneModal = $(\"#killPhoneModal\"); killPhoneModal.modal(&#123; show: true, // 显示弹出层 backdrop: 'static', // 静止位置关闭 keyboard: false // 关闭键盘事件 &#125;); $(\"#killPhoneBtn\").click(function () &#123; console.log(\"提交手机号码按钮被点击\"); var inputPhone = $(\"#killPhoneKey\").val(); console.log(\"inputPhone\" + inputPhone); if (seckill.validatePhone(inputPhone)) &#123; // 把电话写入cookie $.cookie('userPhone', inputPhone, &#123;expires: 7, path: '/seckill'&#125;); // 验证通过 刷新页面 window.location.reload(); &#125; else &#123; // todo 错误文案信息写到前端 $(\"#killPhoneMessage\").hide().html(\"&lt;label class='label label-danger'&gt;手机号码错误&lt;/label&gt;\").show(300); &#125; &#125;); &#125; else &#123; console.log(\"在cookie中找到了电话号码,开启计时\"); // 已经登录了就开始计时交互 var startTime = params['startTime']; var endTime = params['endTime']; var seckillId = params['seckillId']; console.log(\"开始秒杀时间=======\" + startTime); console.log(\"结束秒杀时间========\" + endTime); $.get(seckill.URL.now(), &#123;&#125;, function (result) &#123; if (result &amp;&amp; result['success']) &#123; var nowTime = seckill.convertTime(result['data']); console.log(\"服务器当前的时间==========\" + nowTime); // 进行秒杀商品的时间判断,然后计时交互 seckill.countDown(seckillId, nowTime, startTime, endTime); &#125; else &#123; console.log('结果:' + result); console.log('result' + result); &#125; &#125;); &#125; &#125; &#125;, handlerSeckill: function (seckillId, mode) &#123; // 获取秒杀地址 mode.hide().html('&lt;button class=\"btn btn-primary btn-lg\" id=\"killBtn\"&gt;开始秒杀&lt;/button&gt;'); console.debug(\"开始进行秒杀地址获取\"); $.get(seckill.URL.exposer(seckillId), &#123;&#125;, function (result) &#123; if (result &amp;&amp; result['success']) &#123; var exposer = result['data']; if (exposer['exposed']) &#123; console.log(\"有秒杀地址接口\"); // 开启秒杀,获取秒杀地址 var md5 = exposer['md5']; var killUrl = seckill.URL.execution(seckillId, md5); console.log(\"秒杀的地址为:\" + killUrl); // 绑定一次点击事件 $(\"#killBtn\").one('click', function () &#123; console.log(\"开始进行秒杀,按钮被禁用\"); // 执行秒杀请求,先禁用按钮 $(this).addClass(\"disabled\"); // 发送秒杀请求 $.post(killUrl, &#123;&#125;, function (result) &#123; var killResult = result['data']; var state = killResult['state']; var stateInfo = killResult['stateInfo']; console.log(\"秒杀状态\" + stateInfo); // 显示秒杀结果 mode.html('&lt;span class=\"label label-success\"&gt;' + stateInfo + '&lt;/span&gt;'); &#125;); &#125;); mode.show(); &#125; else &#123; console.warn(\"还没有暴露秒杀地址接口,无法进行秒杀\"); // 未开启秒杀 var now = seckill.convertTime(exposer['now']); var start = seckill.convertTime(exposer['start']); var end = seckill.convertTime(exposer['end']); console.log(\"当前时间\" + now); console.log(\"开始时间\" + start); console.log(\"结束时间\" + end); console.log(\"开始倒计时\"); console.debug(\"开始进行倒计时\"); seckill.countDown(seckillId, now, start, end); &#125; &#125; else &#123; console.error(\"服务器端查询秒杀商品详情失败\"); console.log('result' + result.valueOf()); &#125; &#125;); &#125;, countDown: function (seckillId, nowTime, startTime, endTime) &#123; console.log(\"秒杀的商品ID:\" + seckillId + \",服务器当前时间：\" + nowTime + \",开始秒杀的时间:\" + startTime + \",结束秒杀的时间\" + endTime); // 获取显示倒计时的文本域 var seckillBox = $(\"#seckill-box\"); // 获取时间戳进行时间的比较 nowTime = new Date(nowTime).valueOf(); startTime = new Date(startTime).valueOf(); endTime = new Date(endTime).valueOf(); console.log(\"转换后的Date类型当前时间戳\" + nowTime); console.log(\"转换后的Date类型开始时间戳\" + startTime); console.log(\"转换后的Date类型结束时间戳\" + endTime); if (nowTime &lt; endTime &amp;&amp; nowTime &gt; startTime) &#123; // 秒杀开始 console.log(\"秒杀可以开始,两个条件符合\"); seckill.handlerSeckill(seckillId, seckillBox); &#125; else if (nowTime &gt; endTime) &#123; alert(nowTime &gt; endTime); console.log(nowTime + \"&gt;\" + startTime); // 秒杀结束 console.warn(\"秒杀已经结束了,当前时间为:\" + nowTime + \",秒杀结束时间为\" + endTime); seckillBox.html(\"秒杀结束\"); &#125; else &#123; console.log(\"秒杀还没开始\"); alert(nowTime &lt; startTime); // 秒杀未开启 var killTime = new Date(startTime + 1000); console.log(killTime); console.log(\"开始计时效果\"); seckillBox.countdown(killTime, function (event) &#123; // 事件格式 var format = event.strftime(\"秒杀倒计时: %D天 %H时 %M分 %S秒\"); console.log(format); seckillBox.html(format); &#125;).on('finish.countdown', function () &#123; // 事件完成后回调事件,获取秒杀地址,控制业务逻辑 console.log(\"准备执行回调,获取秒杀地址,执行秒杀\"); console.log(\"倒计时结束\"); seckill.handlerSeckill(seckillId, seckillBox); &#125;); &#125; &#125;, cloneZero: function (time) &#123; var cloneZero = \":00\"; if (time.length &lt; 6) &#123; console.warn(\"需要拼接时间\"); time = time + cloneZero; return time; &#125; else &#123; console.log(\"时间是完整的\"); return time; &#125; &#125;, convertTime: function (localDateTime) &#123; var year = localDateTime.year; var monthValue = localDateTime.monthValue; var dayOfMonth = localDateTime.dayOfMonth; var hour = localDateTime.hour; var minute = localDateTime.minute; var second = localDateTime.second; return year + \"-\" + monthValue + \"-\" + dayOfMonth + \" \" + hour + \":\" + minute + \":\" + second; &#125;&#125;; 自定义jstl标签参考资料stackoverflow上的资料1stackoverflow上的资料2编写完了就部署运行吧,不出意外的话就是这个样子的: 上一篇 (二)Java高并发秒杀API之Service层下一篇 (四)Java高并发秒杀API之高并发优化 (一)Java高并发秒杀API之Service层 如果项目流程总结中有什么问题欢迎发Issue给我,或者您也可以直接联系我`sunybyjava@gmail.com`,感谢您的阅读"}],"posts":[{"title":"hexo-new-article","slug":"hexo-new-article","date":"2018-12-12T06:21:15.000Z","updated":"2018-12-12T06:26:02.716Z","comments":true,"path":"2018/12/12/hexo-new-article/","link":"","permalink":"http://yoursite.com/2018/12/12/hexo-new-article/","excerpt":"","text":"seckill一个整合SSM框架的高并发和商品秒杀项目,学习目前较流行的Java框架组合实现高并发秒杀API 项目的来源项目的来源于国内IT公开课平台,质量没的说,很适合学习一些技术的基础,这个项目是由四个系列的课程组成的,流程分为几个流程,很基础地教你接触到一个相对有技术含量的项目 Java高并发秒杀API之业务分析与DAO层 Java高并发秒杀API之web层 Java高并发秒杀API之Service层 Java高并发秒杀API之高并发优化 其实这几个流程也就是开发的流程,首先从DAO层开始开发,从后往前开发,开始Coding吧！ 项目环境的搭建 操作系统 : Ubuntu 17.04 IDE ：IntelliJ IDEA 2016.2.5 x64 用Eclipse也一样的,工具时靠人用的 JDK : JDK1.8 建议使用JDK1.7以上版本,有许多语法糖用着挺舒服的 Web容器 ： Tomcat 8.0 数据库 ：Mysql-5.6.17-WinX64 实验性的项目用Mysql就足够啦 依赖管理工具 : Maven 管理jar包真的很方便 这里列出的环境不是必须的,你喜欢用什么就用什么,这里只是给出参考,不过不同的版本可能会引起各种不同的问题就需要我们自己去发现以及排查,在这里使用Maven的话时方便我们管理JAR包,我们不用跑去各种开源框架的官网去下载一个又一个的JAR包,配置好了Maven后添加pom文件坐标就会从中央仓库下载JAR包,如果哪天替换版本也很方便 项目效果图 秒杀商品列表 秒杀结束提示界面 开始秒杀提示界面 重复秒杀提示界面 秒杀秒杀成功提示界面 项目的运行下载Download Zip或者 git clone1git clone https://github.com/Sunybyjava/seckill.git 导入到IDE这里因为是使用IDEA创建的项目,所以使用IDEA直接打开是很方便的,提前是你要配置好maven的相关配置,以及项目JDK版本,JDK版本必须在1.8以上,因为在项目中使用了Java8的LocalDateTime以及LocalDate,所以低于这个版本编译会失败的 IDEA直接在主界面选择Open,然后找到项目所在路径,点击pom.xml打开就可以了 Eclipse这个项目是基于IDEA创建,我这里把项目转成了Eclipse的项目,如果你使用Eclipse的话也可以直接导入,只是步骤更繁琐一点,Eclipse导入步骤 项目编码项目总结可能比较的长,密集恐惧症者请按小节进行阅读 (一)Java高并发秒杀API之业务分析与DAO层 (二)Java高并发秒杀API之Service层 (三)Java高并发秒杀API之web层 (四)Java高并发秒杀API之高并发优化 这里按照上面几个流程走下去,你要有基本的Maven认识以及Java语法的一些概念,要不然可能不太理解 (一)Java高并发秒杀APi之业务分析与DAO层代码编写构建项目的基本骨架 首先我们要搭建出一个符合Maven约定的目录来,这里大致有两种方式,第一种: 第一种使用命令行手动构建一个maven结构的目录,当然我基本不会这样构建123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152mvn archetype:generate -DgroupId=com.suny.seckill -DartifactId=seckill -Dpackage=com.suny.seckill -Dversion=1.0-SNAPSHOT -DarchetypeArtifactId=maven-archetype-webapp``` 这里要注意的是使用`archetype:generate`进行创建,在Maven老版本中是使用`archetype:create`,现在这种方法已经被弃用了,所以使用命令行创建的话注意了,稍微解释下这段语句的意思,就是构建一个一个`maven-archetype-webapp`骨架的Webapp项目,然后`groupId`为`com.suny.seckill `,`artifactId`为`seckill`,这里是Maven相关知识,可以按照自己的情况进行修改 2.第二种直接在IDE中进行创建,这里以IDEA为例 + 点击左上角`File&gt;New&gt;Project&gt;Maven` + 然后在里面勾选`Create from archetype`,然后再往下拉找到`org.apache.cocoon:cocoon-22-archetype-webapp`,选中它,注意要先勾选那个选项,否则选择不了,然后点击`Next`继续 ![创建Maven项目](images/001.png) +然后就填写你的Maven的那几个重要的坐标了,自己看着填吧 ![填写Maven坐标](images/002.png) +再就配置你的Maven的相关信息,默认应该是配置好的 ![填写Maven在你本机的位置](images/003.png) +之后就是点`Finsh`,到此不出意外的话就应该创建成功了 #### 构建pom文件 项目基本的骨架我们就创建出来了,接下来我们要添加一些基本的JAR包的依赖,也就是在`pom.xml`中添加各种开源组件的三坐标了 ```xml&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.suny.seckill&lt;/groupId&gt; &lt;artifactId&gt;seckill&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;seckill Maven Webapp&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;dependencies&gt; &lt;!--junit测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--配置日志相关,日志门面使用slf4j,日志的具体实现由logback实现--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.7&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据库相关依赖--&gt; &lt;!--首先导入连接Mysql数据连接--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.39&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入mybatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入Servlet web相关的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring默认的json转换--&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入spring相关依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.3.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入springTest--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.2.7.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;seckill&lt;/finalName&gt; &lt;/build&gt;&lt;/project&gt; 建立数据库在根目录下有一个sql文件夹里面有一个sql数据库脚本,如果你不想自己手写的话就直接导入到你的数据库里面去吧,不过还是建议自己手写一遍加深印象 12345678910111213141516171819202122232425262728293031323334353637383940-- 整个项目的数据库脚本-- 开始创建一个数据库CREATE DATABASE seckill;-- 使用数据库USE seckill;-- 创建秒杀库存表CREATE TABLE seckill( `seckill_id` BIGINT NOT NULL AUTO_INCREMENT COMMENT '商品库存ID', `name` VARCHAR(120) NOT NULL COMMENT '商品名称', `number` INT NOT NULL COMMENT '库存数量', `start_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT '秒杀开启的时间', `end_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT '秒杀结束的时间', `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT '创建的时间', PRIMARY KEY (seckill_id), KEY idx_start_time(start_time), KEY idx_end_time(end_time), KEY idx_create_time(create_time))ENGINE =InnoDB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8 COMMENT='秒杀库存表';-- 插入初始化数据insert into seckill(name,number,start_time,end_time)values ('1000元秒杀iphone6',100,'2016-5-22 00:00:00','2016-5-23 00:00:00'), ('500元秒杀iPad2',200,'2016-5-22 00:00:00','2016-5-23 00:00:00'), ('300元秒杀小米4',300,'2016-5-22 00:00:00','2016-5-23 00:00:00'), ('200元秒杀红米note',400,'2016-5-22 00:00:00','2016-5-23 00:00:00');-- 秒杀成功明细表-- 用户登录相关信息create table success_killed( `seckill_id` BIGINT NOT NULL COMMENT '秒杀商品ID', `user_phone` BIGINT NOT NULL COMMENT '用户手机号', `state` TINYINT NOT NULL DEFAULT -1 COMMENT '状态标示:-1无效 0成功 1已付款', `create_time` TIMESTAMP NOT NULL COMMENT '创建时间', PRIMARY KEY (seckill_id,user_phone), /*联合主键*/ KEY idx_create_time(create_time))ENGINE =InnDB DEFAULT CHARSET =utf8 COMMENT ='秒杀成功明细表' 在建立数据库的,如果按照我这里的数据库脚本建立的话应该是没问题的,但是我按照视频里面的数据库脚本建表的话发生了一个错误这个报错看起来比较的诡异,我仔细检查sql也没有错误,它总提示我end_time要有一个默认的值,可我记得我以前就不会这样,然后视频里面也没有执行错误,然后我感觉可能时MySQL版本的差异,我查看了下我数据库版本,在登录Mysql控制台后输入指令,在控制台的我暂时知道的有两种方式:12select version(); select @@version; 我的输出结果如下:其实登录进控制台就已经可以看到版本了,我的Mysql是5.7的,以前我用的时5.6的,然后去Google上搜索了下,找到了几个答案,参考链接： Invalid default value for ‘create_date’ timestamp field mysql官方的解释 MySQL Community 5.7 - Invalid default value (datetime field type) 总结出来一句话就是: mysql 5.7中,默认使用的是严格模式,这里的日期必须要有时间,所以一定要给出默认值,要么就修改数据库设置 然后网友评论里总结出来的几种解决办法,未经测试！： 下次有问题一定要先看一下评论！！！create不了的同学,可以这样写： 123`start_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '秒杀开始时间',`end_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '秒杀结束时间',`create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', 关于timestamp的问题,需要先运行 set explicit_defaults_for_timestamp = 1,否则会报invalid default value错误 还需要注意的是SQL版本的问题会导致视频中seckill表创建会出错。只要将create_time放在start_time和end_time之前是方便的解决方法。 对比下我修改过后的跟视频里面的sql片段:我们可以看到在这三个字段有一个小差别,那就是给start_time,end_time,create_time三个字段都添加一个默认值,然后执行数据库语句就没问题了 这里我们需要修改下web.xml中的servlet版本为3.0打开WEB-INF下的web.xml,修改为以下代码:1234567&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\" metadata-complete=\"true\"&gt; &lt;!--用maven创建的web-app需要修改servlet的版本为3.0--&gt; 修改的原因有以下几点: 高版本的Servlet支持更多的特性,更方便我们的Coding,特别是支持注解这一特性 在Servlet2.3中新加入了Listener接口的实现,,我们可以使用Listener引入Spring的ContextLoaderListener 举个栗子: 在Servlet2.3以前我们这样配置ContextLoaderListener: 12345&lt;servlet&gt; &lt;servlet-name&gt;context&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.context.ContextLoaderServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt; 在Servlet2.3以后可以使用Listener配置,也就是我们项目中使用的方法123&lt;listener&gt; &lt;listener-class&gt;org.springframework.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; 两种方法的效果都是一样的,主要不要同时使用,否则会报错的 建立实体类 首先建立SuccessKilled 秒杀状态表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package com.suny.entity;import java.io.Serializable;import java.time.LocalDateTime;public class SuccessKilled implements Serializable &#123; private static final long serialVersionUID = 1834437127882846202L; private long seckillId; /* 用户的手机号码*/ private long userPhone; /* 秒杀的状态*/ private short state; /* 创建时间*/ private LocalDateTime createTime; /* 多对一,因为一件商品在库存中肯定有许多,对应的购买信息也有很多*/ private Seckill seckill; public SuccessKilled() &#123; &#125; public SuccessKilled(long seckillId, long userPhone, short state, LocalDateTime createTime, Seckill seckill) &#123; this.seckillId = seckillId; this.userPhone = userPhone; this.state = state; this.createTime = createTime; this.seckill = seckill; &#125; public long getSeckillId() &#123; return seckillId; &#125; public void setSeckillId(long seckillId) &#123; this.seckillId = seckillId; &#125; public long getUserPhone() &#123; return userPhone; &#125; public void setUserPhone(long userPhone) &#123; this.userPhone = userPhone; &#125; public short getState() &#123; return state; &#125; public void setState(short state) &#123; this.state = state; &#125; public LocalDateTime getCreateTime() &#123; return createTime; &#125; public void setCreateTime(LocalDateTime createTime) &#123; this.createTime = createTime; &#125; public Seckill getSeckill() &#123; return seckill; &#125; public void setSeckill(Seckill seckill) &#123; this.seckill = seckill; &#125; @Override public String toString() &#123; return \"SuccessKilled&#123;\" + \"主键ID=\" + seckillId + \", 手机号码=\" + userPhone + \", 秒杀状态=\" + state + \", 创建时间=\" + createTime + \", 秒杀的商品=\" + seckill + '&#125;'; &#125;&#125; 再建立Seckill 秒杀商品信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package com.suny.entity;import java.io.Serializable;import java.time.LocalDateTime;public class Seckill implements Serializable &#123; private static final long serialVersionUID = 2912164127598660137L; /* 主键ID*/ private long seckillId; /* 秒杀商品名字 */ private String name; /* 秒杀的商品编号 */ private int number; /* 开始秒杀的时间 */ private LocalDateTime startTime; /* 结束秒杀的时间 */ private LocalDateTime endTime; /* 创建的时间 */ private LocalDateTime createTIme; public Seckill() &#123; &#125; public Seckill(long seckillId, String name, int number, LocalDateTime startTime, LocalDateTime endTime, LocalDateTime createTIme) &#123; this.seckillId = seckillId; this.name = name; this.number = number; this.startTime = startTime; this.endTime = endTime; this.createTIme = createTIme; &#125; public long getSeckillId() &#123; return seckillId; &#125; public void setSeckillId(long seckillId) &#123; this.seckillId = seckillId; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; public LocalDateTime getStartTime() &#123; return startTime; &#125; public void setStartTime(LocalDateTime startTime) &#123; this.startTime = startTime; &#125; public LocalDateTime getEndTime() &#123; return endTime; &#125; public void setEndTime(LocalDateTime endTime) &#123; this.endTime = endTime; &#125; public LocalDateTime getCreateTIme() &#123; return createTIme; &#125; public void setCreateTIme(LocalDateTime createTIme) &#123; this.createTIme = createTIme; &#125; @Override public String toString() &#123; return \"com.suny.entity.Seckill&#123;\" + \"主键ID=\" + seckillId + \", 秒杀商品='\" + name + '\\'' + \", 编号=\" + number + \", 开始秒杀时间=\" + startTime + \", 结束秒杀时间=\" + endTime + \", 创建时间=\" + createTIme + '&#125;'; &#125;&#125; 对实体类创建对应的mapper接口,也就是dao接口类 首先创建SeckillMapper,在我这里位于com.suny.dao包下 123456789101112131415161718192021222324252627282930313233package com.suny.dao;import com.suny.entity.Seckill;import org.apache.ibatis.annotations.Param;import java.time.LocalDateTime;import java.util.List;public interface SeckillMapper &#123; /** * 根据传过来的&lt;code&gt;seckillId&lt;/code&gt;去减少商品的库存. * * @param seckillId 秒杀商品ID * @param killTime 秒杀的精确时间 * @return 如果秒杀成功就返回1,否则就返回0 */ int reduceNumber(@Param(\"seckillId\") long seckillId, @Param(\"killTime\") LocalDateTime killTime); /** * 根据传过来的&lt;code&gt;seckillId&lt;/code&gt;去查询秒杀商品的详情. * * @param seckillId 秒杀商品ID * @return 对应商品ID的的数据 */ Seckill queryById(@Param(\"seckillId\") long seckillId); /** * 根据一个偏移量去查询秒杀的商品列表. * * @param offset 偏移量 * @param limit 限制查询的数据个数 * @return 符合偏移量查出来的数据个数 */ List&lt;Seckill&gt; queryAll(@Param(\"offset\") int offset, @Param(\"limit\") int limit);&#125; 再创建SuccessKilledMapper 12345678910111213141516171819202122232425package com.suny.dao;import com.suny.entity.SuccessKilled;import org.apache.ibatis.annotations.Param;public interface SuccessKilledMapper &#123; /** * 插入一条详细的购买信息. * * @param seckillId 秒杀商品的ID * @param userPhone 购买用户的手机号码 * @return 成功插入就返回1, 否则就返回0 */ int insertSuccessKilled(@Param(\"seckillId\") long seckillId, @Param(\"userPhone\") long userPhone); /** * 根据秒杀商品的ID查询&lt;code&gt;SuccessKilled&lt;/code&gt;的明细信息. * * @param seckillId 秒杀商品的ID * @param userPhone 购买用户的手机号码 * @return 秒杀商品的明细信息 */ SuccessKilled queryByIdWithSeckill(@Param(\"seckillId\") long seckillId, @Param(\"userPhone\") long userPhone);&#125; 接下来书写xml配置文件建立对应的mapper.xml首先在src/main/resources建立com.suny.dao这个包,也就是对应mapper接口文件包一样的包名,这样符合Maven的约定,就是资源放置在Resource包下,Java包下则是放置java类文件,编译后最后还是会在同一个目录下. 首先建立SeckillMapper.xml 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.suny.dao.SeckillMapper\"&gt; &lt;!--这里的&lt;=需要使用进行忽略,所以是要进行忽略,使用CDATA 区段中的文本会被解析器忽略 --&gt; &lt;update id=\"reduceNumber\"&gt; UPDATE seckill SET number = number - 1 WHERE seckill_id = #&#123;seckillId&#125; AND start_time &lt;![CDATA[ &lt;= ]]&gt; #&#123;killTime&#125; AND end_time &gt;= #&#123;killTime&#125; AND number &gt; 0 &lt;/update&gt; &lt;select id=\"queryById\" resultType=\"com.suny.entity.Seckill\"&gt; SELECT * FROM seckill AS s WHERE s.seckill_id = #&#123;seckillId&#125; &lt;/select&gt; &lt;select id=\"queryAll\" resultType=\"com.suny.entity.Seckill\"&gt; SELECT * FROM seckill AS s ORDER BY create_time DESC LIMIT #&#123;offset&#125;, #&#123;limit&#125; &lt;/select&gt;&lt;/mapper&gt; 建立SuccessKilledMapper.xml 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"com.suny.dao.SuccessKilledMapper\"&gt; &lt;!--添加主键冲突时忽略错误返回0--&gt; &lt;insert id=\"insertSuccessKilled\"&gt; INSERT IGNORE INTO success_killed (seckill_id, user_phone, state) VALUES (#&#123;seckillId&#125;, #&#123;userPhone&#125;, 0) &lt;/insert&gt; &lt;!--根据seckillId查询SuccessKilled对象,并携带Seckill对象,告诉mybatis把映射结果映射到SuccessKill属性同时映射到Seckill属性--&gt; &lt;select id=\"queryByIdWithSeckill\" resultType=\"com.suny.entity.SuccessKilled\"&gt; SELECT sk.seckill_id, sk.user_phone, sk.create_time, sk.state, s.seckill_id \"seckill.seckill_id\", s.name \"seckill.name\", s.number \"seckill\", s.start_time \"seckill.start_time\", s.end_time \"seckill.end_time\", s.create_time \"seckill.create_time\" FROM success_killed sk INNER JOIN seckill s ON sk.seckill_id = s.seckill_id WHERE sk.seckill_id = #&#123;seckillId&#125; AND sk.user_phone= #&#123;userPhone&#125; &lt;/select&gt;&lt;/mapper&gt; 建立Mybatis的配置文件mybatis-config.xml 123456789101112131415&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\" &gt;&lt;configuration&gt; &lt;!--首先配置全局属性--&gt; &lt;settings&gt; &lt;!--开启自动填充主键功能,原理时通过jdbc的一个方法getGeneratekeys获取自增主键值--&gt; &lt;setting name=\"useGeneratedKeys\" value=\"true\"/&gt; &lt;!--使用别名替换列名,默认就是开启的--&gt; &lt;setting name=\"useColumnLabel\" value=\"true\"/&gt; &lt;!--开启驼峰命名的转换--&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/&gt; &lt;/settings&gt;&lt;/configuration&gt; 然后建立连接数据库的配置文件jdbc.properties,这里的属性要根据自己的需要去进行修改,切勿直接复制使用 1234jdbc.driver=com.mysql.jdbc.Driverjdbc.user=rootjdbc.password=rootjdbc.url=jdbc:mysql://localhost:3306/seckill?useUnicode=true&amp;characterEncoding=utf-8 建立Spring的dao的配置文件,在resources包下创建applicationContext-dao.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!--suppress SpringFacetInspection --&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"&gt; &lt;context:property-placeholder location=\"classpath:jdbc.properties\"/&gt; &lt;!--配置数据库连接池--&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;!--配置基本的数据库连接--&gt; &lt;property name=\"driverClass\" value=\"$&#123;jdbc.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbc.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;jdbc.user&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt; &lt;!--c3p0私有属性--&gt; &lt;property name=\"maxPoolSize\" value=\"30\"/&gt; &lt;property name=\"minPoolSize\" value=\"10\"/&gt; &lt;!--关闭连接后不自动commit--&gt; &lt;property name=\"autoCommitOnClose\" value=\"false\"/&gt; &lt;!--获取连接超时时间--&gt; &lt;property name=\"checkoutTimeout\" value=\"1000\"/&gt; &lt;!--当获取连接失败时的重试次数--&gt; &lt;/bean&gt; &lt;!--配置sqlSessionFactory对象--&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;!--注入数据库连接池--&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;!--配置mybatis全局配置文件--&gt; &lt;property name=\"configLocation\" value=\"mybatis-config.xml\"/&gt; &lt;!--配置entity包,也就是实体类包,自动扫描,用于别名配置--&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.suny.entity\"/&gt; &lt;!--配置需要扫描的mapper.xml文件--&gt; &lt;property name=\"mapperLocations\" value=\"classpath*:com/suny/dao/*.xml\"/&gt; &lt;/bean&gt; &lt;!--配置mapper接口包,动态实现mapper接口,注入到Spring容器--&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!--注入sqlSessionFactory,请注意不要使用sqlSessionFactoryBean,否则会出现注入异常--&gt; &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/&gt; &lt;!--给出要扫描的mapper接口--&gt; &lt;property name=\"basePackage\" value=\"com.suny.dao\"/&gt; &lt;/bean&gt;&lt;/beans&gt; 基础的部分我们搭建完成了,然后要开始测试了在IDEA里面有一个快速建立测试的快捷键Ctrl+Shift+T,在某个要测试的类里面按下这个快捷键就会出现Create new Test,然后选择你要测试的方法跟测试的工具就可以了,这里我们使用Junit作为测试 建立SeckillMapperTest文件,代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.suny.dao;import com.suny.entity.Seckill;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import javax.annotation.Resource;import java.time.LocalDateTime;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;\"classpath:spring/applicationContext-dao.xml\"&#125;)public class SeckillMapperTest &#123; @Resource private SeckillMapper seckillMapper; @Test public void reduceNumber() throws Exception &#123; long seckillId=1000; LocalDateTime localDateTime=LocalDateTime.now(); int i = seckillMapper.reduceNumber(seckillId, localDateTime); System.out.println(i); &#125; @Test public void queryById() throws Exception &#123; long seckillId = 1000; Seckill seckill = seckillMapper.queryById(seckillId); System.out.println(seckill.toString()); &#125; @Test public void queryAll() throws Exception &#123; List&lt;Seckill&gt; seckills = seckillMapper.queryAll(0, 100); for (Seckill seckill : seckills) &#123; System.out.println(seckill.toString()); &#125; &#125;&#125; 测试中可能会出现Mybatis参数绑定失败的错误,在mapper接口中的方法里面添加@Param的注解,显示的告诉mybatis参数的名称是什么,例如12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 List&lt;Seckill&gt; queryAll(@Param(\"offset\") int offset, @Param(\"limit\") int limit);``` #### 2016-5-23 13:46：28--- ### (二)Java高并发秒杀API之Service层 首先在编写`Service`层代码前,我们应该首先要知道这一层到底时干什么的,这里摘取来自`ITEYE`一位博主的原话 &gt; Service层主要负责业务模块的逻辑应用设计。同样是首先设计接口,再设计其实现的类,接着再Spring的配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。Service层的业务实现,具体要调用到已定义的DAO层的接口,封装Service层的业务逻辑有利于通用的业务逻辑的独立性和重复利用性,程序显得非常简洁。 在项目中要降低耦合的话,分层是一种很好的概念,就是各层各司其职,尽量不做不相干的事,所以`Service`层的话顾名思义就是**业务逻辑**,处理程序中的一些业务逻辑,以及调用`DAO`层的代码,这里我们的`DAo`层就是连接数据库的那一层,调用关系可以这样表达: View(页面)&gt;Controller(控制层)&gt;Service(业务逻辑)&gt;Dao(数据访问)&gt;Database(数据库) + 首先还是接口的设计,设计Service秒杀商品的接口 ``SeckillService`` 首先在`som.suny`包下建立`interfaces`这个包,这个包里面存放`Service`相关的接口,然后建立`SeckillService`接口文件,代码如下: ```javapublic interface SeckillService &#123; /** * 查询全部的秒杀记录. * @return 数据库中所有的秒杀记录 */ List&lt;Seckill&gt; getSeckillList(); /** * 查询单个秒杀记录 * @param seckillId 秒杀记录的ID * @return 根据ID查询出来的记录信息 */ Seckill getById(long seckillId); /** * 在秒杀开启时输出秒杀接口的地址,否则输出系统时间跟秒杀地址 * @param seckillId 秒杀商品Id * @return 根据对应的状态返回对应的状态实体 */ Exposer exportSeckillUrl(long seckillId); /** * 执行秒杀操作,有可能是失败的,失败我们就抛出异常 * @param seckillId 秒杀的商品ID * @param userPhone 手机号码 * @param md5 md5加密值 * @return 根据不同的结果返回不同的实体信息 */ SeckillExecution executeSeckill(long seckillId,long userPhone,String md5)throws SeckillException,RepeatKillException,SeckillCloseException; 建立后接口之后我们要写实现类了,在写实现类的时候我们肯定会碰到一个这样的问题,你要向前端返回json数据的话,你是返回什么样的数据好?直接返回一个数字状态码或者时文字?这样设计肯定是不好的,所以我们应该向前段返回一个实体信息json,里面包含了一系列的信息,无论是哪种状态都应该可以应对,既然是与数据库字段无关的类,那就不是PO了,所以我们建立一个DTO数据传输类,关于常见的几种对象我的解释如下: PO: 也就是我们在为每一张数据库表写一个实体的类 VO, 对某个页面或者展现层所需要的数据,封装成一个实体类 BO, 就是业务对象,我也不是很了解 DTO, 跟VO的概念有点混淆,也是相当于页面需要的数据封装成一个实体类 POJO, 简单的无规则java对象 在com.suny下建立dto包,然后建立Exposer类,这个类是秒杀时数据库那边处理的结果的对象 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596public class Exposer &#123; /*是否开启秒杀 */ private boolean exposed; /* 对秒杀地址进行加密措施 */ private String md5; /* id为seckillId的商品秒杀地址 */ private long seckillId; /* 系统当前的时间 */ private LocalDateTime now; /* 秒杀开启的时间 */ private LocalDateTime start; /* 秒杀结束的时间 */ private LocalDateTime end; public Exposer() &#123; &#125; public Exposer(boolean exposed, String md5, long seckillId) &#123; this.exposed = exposed; this.md5 = md5; this.seckillId = seckillId; &#125; public Exposer(boolean exposed, long seckillId, LocalDateTime now, LocalDateTime start, LocalDateTime end) &#123; this.exposed = exposed; this.seckillId = seckillId; this.now = now; this.start = start; this.end = end; &#125; public Exposer(boolean exposed, long seckillId) &#123; this.exposed = exposed; this.seckillId = seckillId; &#125; public boolean isExposed() &#123; return exposed; &#125; public void setExposed(boolean exposed) &#123; this.exposed = exposed; &#125; public String getMd5() &#123; return md5; &#125; public void setMd5(String md5) &#123; this.md5 = md5; &#125; public long getSeckillId() &#123; return seckillId; &#125; public void setSeckillId(long seckillId) &#123; this.seckillId = seckillId; &#125; public LocalDateTime getNow() &#123; return now; &#125; public void setNow(LocalDateTime now) &#123; this.now = now; &#125; public LocalDateTime getStart() &#123; return start; &#125; public void setStart(LocalDateTime start) &#123; this.start = start; &#125; public LocalDateTime getEnd() &#123; return end; &#125; public void setEnd(LocalDateTime end) &#123; this.end = end; &#125; @Override public String toString() &#123; return \"Exposer&#123;\" + \"秒杀状态=\" + exposed + \", md5加密值='\" + md5 + '\\'' + \", 秒杀ID=\" + seckillId + \", 当前时间=\" + now + \", 开始时间=\" + start + \", 结束=\" + end + '&#125;'; &#125;&#125; 然后我们给页面返回的数据应该是更加友好的封装数据,所以我们再在com.suny.dto包下再建立SeckillExecution用来封装给页面的结果: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class SeckillExecution &#123; private long seckillId; /* 执行秒杀结果的状态 */ private int state; /* 状态的明文标示 */ private String stateInfo; /* 当秒杀成功时,需要传递秒杀结果的对象回去 */ private SuccessKilled successKilled; /* 秒杀成功返回的实体 */ public SeckillExecution(long seckillId, int state, String stateInfo, SuccessKilled successKilled) &#123; this.seckillId = seckillId; this.state = state; this.stateInfo = stateInfo; this.successKilled = successKilled; &#125; /* 秒杀失败返回的实体 */ public SeckillExecution(long seckillId, int state, String stateInfo) &#123; this.seckillId = seckillId; this.state = state; this.stateInfo = stateInfo; &#125; public long getSeckillId() &#123; return seckillId; &#125; public void setSeckillId(long seckillId) &#123; this.seckillId = seckillId; &#125; public int getState() &#123; return state; &#125; public void setState(int state) &#123; this.state = state; &#125; public String getStateInfo() &#123; return stateInfo; &#125; public void setStateInfo(String stateInfo) &#123; this.stateInfo = stateInfo; &#125; public SuccessKilled getSuccessKilled() &#123; return successKilled; &#125; public void setSuccessKilled(SuccessKilled successKilled) &#123; this.successKilled = successKilled; &#125; @Override public String toString() &#123; return \"SeckillExecution&#123;\" + \"秒杀的商品ID=\" + seckillId + \", 秒杀状态=\" + state + \", 秒杀状态信息='\" + stateInfo + '\\'' + \", 秒杀的商品=\" + successKilled + '&#125;'; &#125;&#125; 定义秒杀中可能会出现的异常 定义一个基础的异常,所有的子异常继承这个异常SeckillException 12345678910111213/** * 秒杀基础异常 * Created by 孙建荣 on 17-5-23.下午8:24 */public class SeckillException extends RuntimeException &#123; public SeckillException(String message) &#123; super(message); &#125; public SeckillException(String message, Throwable cause) &#123; super(message, cause); &#125;&#125; 首选可能会出现秒杀关闭后被秒杀情况,所以建立秒杀关闭异常SeckillCloseException,需要继承我们一开始写的基础异常 12345678910111213/** * 秒杀已经关闭异常,当秒杀结束就会出现这个异常 * Created by 孙建荣 on 17-5-23.下午8:27 */public class SeckillCloseException extends SeckillException&#123; public SeckillCloseException(String message) &#123; super(message); &#125; public SeckillCloseException(String message, Throwable cause) &#123; super(message, cause); &#125;&#125; 然后还有可能发生重复秒杀异常RepeatKillException 1234567891011121314/** * 重复秒杀异常,不需要我们手动去try catch * Created by 孙建荣 on 17-5-23.下午8:26 */public class RepeatKillException extends SeckillException&#123; public RepeatKillException(String message) &#123; super(message); &#125; public RepeatKillException(String message, Throwable cause) &#123; super(message, cause); &#125;&#125; 实现Service接口123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134/** * Created by 孙建荣 on 17-5-23.下午9:30 */@Servicepublic class SeckillServiceImpl implements SeckillService &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); /* 加入一个盐值,用于混淆*/ private final String salt = \"thisIsASaltValue\"; @Autowired private SeckillMapper seckillMapper; @Autowired private SuccessKilledMapper successKilledMapper; /** * 查询全部的秒杀记录. * * @return 数据库中所有的秒杀记录 */ @Override public List&lt;Seckill&gt; getSeckillList() &#123; return seckillMapper.queryAll(0, 4); &#125; /** * 查询单个秒杀记录 * * @param seckillId 秒杀记录的ID * @return 根据ID查询出来的记录信息 */ @Override public Seckill getById(long seckillId) &#123; return seckillMapper.queryById(seckillId); &#125; /** * 在秒杀开启时输出秒杀接口的地址,否则输出系统时间跟秒杀地址 * * @param seckillId 秒杀商品Id * @return 根据对应的状态返回对应的状态实体 */ @Override public Exposer exportSeckillUrl(long seckillId) &#123; // 根据秒杀的ID去查询是否存在这个商品 /* Seckill seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; logger.warn(\"查询不到这个秒杀产品的记录\"); return new Exposer(false, seckillId); &#125;*/ Seckill seckill = redisDao.getSeckill(seckillId); if (seckill == null) &#123; // 访问数据库读取数据 seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; return new Exposer(false, seckillId); &#125; else &#123; // 放入redis redisDao.putSeckill(seckill); &#125; &#125; // 判断是否还没到秒杀时间或者是过了秒杀时间 LocalDateTime startTime = seckill.getStartTime(); LocalDateTime endTime = seckill.getEndTime(); LocalDateTime nowTime = LocalDateTime.now(); // 开始时间大于现在的时候说明没有开始秒杀活动 秒杀活动结束时间小于现在的时间说明秒杀已经结束了 /* if (!nowTime.isAfter(startTime)) &#123; logger.info(\"现在的时间不在开始时间后面,未开启秒杀\"); return new Exposer(false, seckillId, nowTime, startTime, endTime); &#125; if (!nowTime.isBefore(endTime)) &#123; logger.info(\"现在的时间不在结束的时间之前,可以进行秒杀\"); return new Exposer(false, seckillId, nowTime, startTime, endTime); &#125;*/ if (nowTime.isAfter(startTime) &amp;&amp; nowTime.isBefore(endTime)) &#123; //秒杀开启,返回秒杀商品的id,用给接口加密的md5 String md5 = getMd5(seckillId); return new Exposer(true, md5, seckillId); &#125; return new Exposer(false, seckillId, nowTime, startTime, endTime); &#125; private String getMd5(long seckillId) &#123; String base = seckillId + \"/\" + salt; return DigestUtils.md5DigestAsHex(base.getBytes()); &#125; /** * 执行秒杀操作,失败的,失败我们就抛出异常 * * @param seckillId 秒杀的商品ID * @param userPhone 手机号码 * @param md5 md5加密值 * @return 根据不同的结果返回不同的实体信息 */ @Override public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException &#123; if (md5 == null || !md5.equals(getMd5(seckillId))) &#123; logger.error(\"秒杀数据被篡改\"); throw new SeckillException(\"seckill data rewrite\"); &#125; // 执行秒杀业务逻辑 LocalDateTime nowTIme = LocalDateTime.now(); try &#123; //执行减库存操作 int reduceNumber = seckillMapper.reduceNumber(seckillId, nowTIme); if (reduceNumber &lt;= 0) &#123; logger.warn(\"没有更新数据库记录,说明秒杀结束\"); throw new SeckillCloseException(\"seckill is closed\"); &#125; else &#123; // 这里至少减少的数量不为0了,秒杀成功了就增加一个秒杀成功详细 int insertCount = successKilledMapper.insertSuccessKilled(seckillId, userPhone); // 查看是否被重复插入,即用户是否重复秒杀 if (insertCount &lt;= 0) &#123; throw new RepeatKillException(\"seckill repeated\"); &#125; else &#123; // 秒杀成功了,返回那条插入成功秒杀的信息 SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone);// return new SeckillExecution(seckillId,1,\"秒杀成功\"); return new SeckillExecution(seckillId,1,\"秒杀成功\",successKilled); &#125; &#125; &#125; catch (SeckillCloseException | RepeatKillException e1) &#123; throw e1; &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); // 把编译期异常转换为运行时异常 throw new SeckillException(\"seckill inner error : \" + e.getMessage()); &#125; &#125; 在这里我们捕获了运行时异常,这样做的原因就是Spring的事物默认就是发生了RuntimeException才会回滚,可以检测出来的异常是不会导致事物的回滚的,这样的目的就是你明知道这里会发生异常,所以你一定要进行处理.如果只是为了让编译通过的话,那捕获异常也没多意思,所以这里要注意事物的回滚.然后我们还发现这里存在硬编码的现象,就是返回各种字符常量,例如秒杀成功,秒杀失败等等,这些字符串时可以被重复使用的,而且这样维护起来也不方便,要到处去类里面寻找这样的字符串,所有我们使用枚举类来管理这样状态,在con.suny包下建立enum包,专门放置枚举类,然后再建立SeckillStatEnum枚举类:123456789101112131415161718192021222324252627282930313233343536373839/** * 常量枚举类 * Created by 孙建荣 on 17-5-23.下午10:15 */public enum SeckillStatEnum &#123; SUCCESS(1, \"秒杀成功\"), END(0, \"秒杀结束\"), REPEAT_KILL(-1, \"重复秒杀\"), INNER_ERROR(-2, \"系统异常\"), DATE_REWRITE(-3, \"数据篡改\"); private int state; private String info; SeckillStatEnum() &#123; &#125; SeckillStatEnum(int state, String info) &#123; this.state = state; this.info = info; &#125; public int getState() &#123; return state; &#125; public String getInfo() &#123; return info; &#125; public static SeckillStatEnum stateOf(int index) &#123; for (SeckillStatEnum statEnum : values()) &#123; if (statEnum.getState() == index) &#123; return statEnum; &#125; &#125; return null; &#125;&#125; 既然把这些改成了枚举,那么在SeckillServiceImpl类中的executeSeckill方法中成功秒杀的返回值就应该修改为1return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled); 改了这里以后会发现会报错,因为在实体类那边构造函数可不是这样的,然后修改SeckillExecution类的构造函数,把state跟stateInfo的值设置从构造函数里面的SeckillStatEnum中取出值来设置：123456789101112131415/* 秒杀成功返回的实体 */ public SeckillExecution(long seckillId, SeckillStatEnum statEnum, SuccessKilled successKilled) &#123; this.seckillId = seckillId; this.state = statEnum.getState(); this.stateInfo = statEnum.getInfo(); this.successKilled = successKilled; &#125; /* 秒杀失败返回的实体 */ public SeckillExecution(long seckillId, SeckillStatEnum statEnum) &#123; this.seckillId = seckillId; this.state = statEnum.getState(); this.stateInfo = statEnum.getInfo(); &#125; 下一步肯定要注入Service了首先在resources/spring下建立applicationContext-service.xml文件,用来配置Service层的相关代码: 12345678910111213141516171819202122&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt; &lt;!--配置自动扫描service包下的注解,在这里配置了自动扫描后,com.suny.service包下所有带有@Service注解的类都会被加入Spring容器中--&gt; &lt;context:component-scan base-package=\"com.suny.service\"/&gt; &lt;!--配置事物,这里时使用基于注解的事物--&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;!--注入数据库连接池--&gt; &lt;property name=\"dataSource\" ref=\"dataSource\"/&gt; &lt;/bean&gt; &lt;!--开启基于注解的申明式事物--&gt; &lt;tx:annotation-driven transaction-manager=\"transactionManager\"/&gt;&lt;/beans&gt; 在这里开启了基于注解的事物,常见的事物操作有以下几种方法 在Spring早期版本中是使用ProxyFactoryBean+XMl方式来配置事物. 在Spring配置文件使用tx:advice+aop命名空间,好处就是一次配置永久生效,你无须去关心中间出的问题,不过出错了你很难找出来在哪里出了问题 注解@Transactional的方式,注解可以在方法定义,接口定义,类定义,public方法上,但是不能注解在private,final,static等方法上,因为Spring的事物管理默认是使用Cglib动态代理的: private方法因为访问权限限制,无法被子类覆盖 final方法无法被子类覆盖 static时类级别的方法,无法被子类覆盖 protected方法可以被子类覆盖,因此可以被动态字节码增强不能被Spring AOP事物增强的方法| 序号 | 动态代理策略 |不能被事物增强的方法 ||:—–:| :—–: |:—–:|| 1 |基于接口的动态代理 |出了public以外的所有方法,并且 public static 的方法也不能被增强 || 2 |基于Cglib的动态代理 | private,static,final的方法 | 然后你要在Service类上添加注解@Service,不用在接口上添加注解：123@Servicepublic class SeckillServiceImpl implements SeckillService 既然已经开启了基于注解的事物,那我们就去需要被事物的方法上加个注解@Transactional吧:123@Transactional @Override public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException Service层的测试写测试类,我这里的测试类名为SeckillServiceImplTest:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * Created by 孙建荣 on 17-5-23.下午10:30 */@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;\"classpath:spring/applicationContext-dao.xml\", \"classpath:spring/applicationContext-service.xml\"&#125;)public class SeckillServiceImplTest &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private SeckillService seckillService; @Test public void getSeckillList() throws Exception &#123; List&lt;Seckill&gt; seckillList = seckillService.getSeckillList(); logger.info(seckillList.toString()); System.out.println(seckillList.toString()); &#125; @Test public void getById() throws Exception &#123; long seckillId = 1000; Seckill byId = seckillService.getById(seckillId); System.out.println(byId.toString()); &#125; @Test public void exportSeckillUrl() throws Exception &#123; long seckillId = 1000; Exposer exposer = seckillService.exportSeckillUrl(seckillId); System.out.println(exposer.toString()); &#125; @Test public void executeSeckill() throws Exception &#123; long seckillId = 1000; Exposer exposer = seckillService.exportSeckillUrl(seckillId); if (exposer.isExposed()) &#123; long userPhone = 12222222222L; String md5 = \"bf204e2683e7452aa7db1a50b5713bae\"; try &#123; SeckillExecution seckillExecution = seckillService.executeSeckill(seckillId, userPhone, md5); System.out.println(seckillExecution.toString()); &#125; catch (SeckillCloseException | RepeatKillException e) &#123; e.printStackTrace(); &#125; &#125; else &#123; System.out.println(\"秒杀未开启\"); &#125; &#125; @Test public void executeSeckillProcedureTest() &#123; long seckillId = 1001; long phone = 1368011101; Exposer exposer = seckillService.exportSeckillUrl(seckillId); if (exposer.isExposed()) &#123; String md5 = exposer.getMd5(); SeckillExecution execution = seckillService.executeSeckillProcedure(seckillId, phone, md5); System.out.println(execution.getStateInfo()); &#125; &#125;&#125; 测试的话如果每个方法测试都通过就说明通过,如果报错了话就仔细看下哪一步错了检查下 (三)Java高并发秒杀系统API之Web层开发既然是Web层的会肯定要先引入SpringMvc了 修改web.xml,引入SpringMvc的DispatcherServlet：1234567891011121314151617181920212223242526&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" version=\"3.0\" metadata-complete=\"true\"&gt; &lt;!--用maven创建的web-app需要修改servlet的版本为3.0--&gt; &lt;servlet&gt; &lt;servlet-name&gt;seckill-dispatchServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!--配置springmvc的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt; 1 &lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;seckill-dispatchServlet&lt;/servlet-name&gt; &lt;!--直接拦截所有请求,不再采用spring2.0的/*或者*.do方式--&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在这里的话如果你不配置这一段代码的：12345&lt;!--配置springmvc的配置文件--&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/init-param&gt; SpringMvc默认就会默认去WEB-INF下查找默认规范的配置文件,像我这里配置的servlet-name是seckill-dispatchServlet的话,则默认会寻找WEB-INF一个名为seckill-dispatchServlet-Servlet.xml的配置文件 接下来编写Controller SeckillController首先在com.suny下建立包为Controller的包,然后在里面新建一个类SeckillController：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114package com.suny.controller;/** * Created by 孙建荣 on 17-5-24.下午10:11 */@Controller@RequestMapping(\"/seckill\")public class SeckillController &#123; private final SeckillService seckillService; @Autowired public SeckillController(SeckillService seckillService) &#123; this.seckillService = seckillService; &#125; /** * 进入秒杀列表. * * @param model 模型数据,里面放置有秒杀商品的信息 * @return 秒杀列表详情页面 */ @RequestMapping(value = &#123;\"/list\",\"\",\"index\"&#125;, method = RequestMethod.GET) public String list(Model model) &#123; List&lt;Seckill&gt; seckillList = seckillService.getSeckillList(); model.addAttribute(\"list\", seckillList); return \"list\"; &#125; @RequestMapping(value = \"/&#123;seckillId&#125;/detail\", method = RequestMethod.GET) public String detail(@PathVariable(\"seckillId\") Long seckillId, Model model) &#123; if (seckillId == null) &#123; return \"redirect:/seckill/list\"; &#125; Seckill seckill = seckillService.getById(seckillId); if (seckill == null) &#123; return \"forward:/seckill/list\"; &#125; model.addAttribute(\"seckill\", seckill); return \"detail\"; &#125; /** * 暴露秒杀接口的方法. * * @param seckillId 秒杀商品的id * @return 根据用户秒杀的商品id进行业务逻辑判断,返回不同的json实体结果 */ @RequestMapping(value = \"/&#123;seckillId&#125;/exposer\", method = RequestMethod.GET) @ResponseBody public SeckillResult&lt;Exposer&gt; exposer(@PathVariable(\"seckillId\") Long seckillId) &#123; // 查询秒杀商品的结果 SeckillResult&lt;Exposer&gt; result; try &#123; Exposer exposer = seckillService.exportSeckillUrl(seckillId); result = new SeckillResult&lt;&gt;(true, exposer); &#125; catch (Exception e) &#123; e.printStackTrace(); result = new SeckillResult&lt;&gt;(false, e.getMessage()); &#125; return result; &#125; /** * 用户执行秒杀,在页面点击相应的秒杀连接,进入后获取对应的参数进行判断,返回相对应的json实体结果,前端再进行处理. * * @param seckillId 秒杀的商品,对应的时秒杀的id * @param md5 一个被混淆的md5加密值 * @param userPhone 参与秒杀用户的额手机号码,当做账号密码使用 * @return 参与秒杀的结果,为json数据 */ @RequestMapping(value = \"/&#123;seckillId&#125;/&#123;md5&#125;/execution\", method = RequestMethod.POST) @ResponseBody public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(\"seckillId\") long seckillId, @PathVariable(\"md5\") String md5, @CookieValue(value = \"userPhone\", required = false) Long userPhone) &#123; // 如果用户的手机号码为空的说明没有填写手机号码进行秒杀 if (userPhone == null) &#123; return new SeckillResult&lt;&gt;(false, \"没有注册\"); &#125; // 根据用户的手机号码,秒杀商品的id跟md5进行秒杀商品,没异常就是秒杀成功 try &#123; // 这里换成储存过程 SeckillExecution execution = seckillService.executeSeckill(seckillId, userPhone, md5); return new SeckillResult&lt;&gt;(true, execution); &#125; catch (RepeatKillException e1) &#123; // 重复秒杀 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillCloseException e2) &#123; // 秒杀关闭 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillException e) &#123; // 不能判断的异常 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); return new SeckillResult&lt;&gt;(false, execution); &#125; // 如果有异常就是秒杀失败 &#125; /** * 获取服务器端时间,防止用户篡改客户端时间提前参与秒杀 * * @return 时间的json数据 */ @RequestMapping(value = \"/time/now\", method = RequestMethod.GET) @ResponseBody public SeckillResult&lt;LocalDateTime&gt; time() &#123; LocalDateTime localDateTime = LocalDateTime.now(); return new SeckillResult&lt;&gt;(true, localDateTime); &#125;&#125; 建立一个全局ajax请求返回类,返回json类型SeckillResult: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.suny.dto;/** * 封装所有的ajax请求返回类型,方便返回json * Created by 孙建荣 on 17-5-24.下午10:18 */public class SeckillResult&lt;T&gt; &#123; private boolean success; private T data; private String error; public SeckillResult() &#123; &#125; public SeckillResult(boolean success, T data) &#123; this.success = success; this.data = data; &#125; public SeckillResult(boolean success, String error) &#123; this.success = success; this.error = error; &#125; public boolean isSuccess() &#123; return success; &#125; public void setSuccess(boolean success) &#123; this.success = success; &#125; public T getData() &#123; return data; &#125; public void setData(T data) &#123; this.data = data; &#125; public String getError() &#123; return error; &#125; public void setError(String error) &#123; this.error = error; &#125; @Override public String toString() &#123; return \"SeckillResult&#123;\" + \"状态=\" + success + \", 数据=\" + data + \", 错误消息='\" + error + '\\'' + '&#125;'; &#125;&#125; 页面的编写因为项目的前端页面都是由Bootstrap开发的,所以我们要先去下载Bootstrap或者是使用在线的CDN. -Bootstrap中文官网 -Bootstrap中文文档 使用在线CDN引入的方法: 12345678&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;&lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"&gt;&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; 文档里面写的很详细,然后我这里是使用离线版本的,方便我们本地调试,避免出现什么别的因素干扰我们: 首先下载JQuery,因为Bootstrap就是依赖JQuery的 然后下载Bootstrap 然后下载一个倒计时插件jquery.countdown.min.js-再下载一个操作Cookie插件jquery.cookie.min.js如图放置: 首先编写一个公共的头部jsp文件,位于WEB-INF下common中的head.jsp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;&lt;meta charset=\"utf-8\"&gt;&lt;link rel=\"stylesheet\" href=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/css/bootstrap.min.css\" type=\"text/css\"&gt;&lt;link rel=\"stylesheet\" href=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/css/bootstrap-theme.min.css\" type=\"text/css\"&gt; ```` - 然后编写一个公共的`jstl`标签库文件,位于`WEB-INF`下`common`中的`tag.jsp` ```jsp&lt;%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %&gt;``` - 编写列表页面,位于`WEB-INF`下`common`中的`list.jsp` ```jsp &lt;%@page contentType=\"text/html; charset=UTF-8\" language=\"java\" %&gt; &lt;%@include file=\"common/tag.jsp\" %&gt; &lt;!DOCTYPE html&gt; &lt;html lang=\"zh-CN\"&gt; &lt;head&gt; &lt;title&gt;秒杀列表&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading text-center\"&gt; &lt;h2&gt;秒杀列表&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;table class=\"table table-hover\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;名称&lt;/td&gt; &lt;td&gt;库存&lt;/td&gt; &lt;td&gt;开始时间&lt;/td&gt; &lt;td&gt;结束时间&lt;/td&gt; &lt;td&gt;创建时间&lt;/td&gt; &lt;td&gt;详情页&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=\"$&#123;list&#125;\" var=\"sk\"&gt; &lt;tr&gt; &lt;td&gt;$&#123;sk.name&#125;&lt;/td&gt; &lt;td&gt;$&#123;sk.number&#125;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.startTime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.endTime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;sk.createTIme&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=\"btn btn-info\" href=\"/seckill/$&#123;sk.seckillId&#125;/detail\" target=\"_blank\"&gt;详情&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt; &lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/html&gt; ``` - 编写列表页面,位于`WEB-INF`下`common`中的`detail.jsp`,秒杀详情页面 ```jsp&lt;%-- Created by IntelliJ IDEA. User: jianrongsun Date: 17-5-25 Time: 下午5:03 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;%@include file=\"common/tag.jsp\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;秒杀商品详情页面&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h1&gt;$&#123;seckill.name&#125;&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;h2 class=\"text-danger\"&gt; &lt;span class=\"glyphicon glyphicon-time\"&gt;&lt;/span&gt; &lt;span class=\"glyphicon\" id=\"seckill-box\"&gt;&lt;/span&gt; &lt;/h2&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div id=\"killPhoneModal\" class=\"modal fade\"&gt; &lt;div class=\"modal-dialog\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-header\"&gt; &lt;h3 class=\"modal-title text-center\"&gt; &lt;span class=\"glyphicon glyphicon-phone\"&gt;&lt;/span&gt;秒杀电话: &lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal-body\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-xs-8 col-xs-offset-2\"&gt; &lt;input type=\"text\" name=\"killPhone\" id=\"killPhoneKey\" placeholder=\"填写手机号码\" class=\"form-control\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"modal-footer\"&gt; &lt;span id=\"killPhoneMessage\" class=\"glyphicon\"&gt;&lt;/span&gt; &lt;button type=\"button\" id=\"killPhoneBtn\" class=\"btn btn-success\"&gt; &lt;span class=\"glyphicon glyphicon-phone\"&gt;&lt;/span&gt; 提交 &lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.cookie.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.countdown.min.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/script/seckill.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function () &#123; var startTimeVal = \"$&#123;seckill.startTime.toLocalDate()&#125; \" + seckill.cloneZero(\"$&#123;seckill.startTime.toLocalTime()&#125;\"); var endTimeVal = \"$&#123;seckill.endTime.toLocalDate()&#125; \" + seckill.cloneZero(\"$&#123;seckill.endTime.toLocalTime()&#125;\"); console.log(\"startTimeVal========\" + startTimeVal); console.log(\"endTimeVal========\" + endTimeVal); // 传入参数 seckill.detail.init(&#123; seckillId:$&#123;seckill.seckillId&#125;, startTime: startTimeVal, endTime: endTimeVal &#125;) &#125;)&lt;/script&gt;&lt;/html&gt;``` 然后把项目运行一下我们又会碰到一个错误就是`jstl`中的`fmt`标签格式化时间只能格式化`java.Util.Date`类型的日期跟时间,而在我们这里我么使用了`java8`的`LocalDateTIme`,所以解析时间会出异常,这时我们应该想到自己去实现`jstl`标签来自定义解析这个时间日期 自定义标签步骤如下: - 在` /WEB-INF `创建目录 `tags` - 然后创建一个文件` localDateTime.tag` 在`tags`目录下 + `localData.tag`用来格式化日期 + `localDataTime.tag`用来格式化日期跟时间的组合,也就是数据库中的`Timestamp`类型 -然后在`localDataTime.tag`中写自己自定义的格式化流程 ```xml&lt;%--格式化java8的LocalDatime,解决jstl不支持java8时间的问题--%&gt;&lt;%@ tag body-content=\"empty\" pageEncoding=\"UTF-8\" trimDirectiveWhitespaces=\"true\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %&gt;&lt;%-- 这里是定义页面使用标签中的属性设置,&lt;tags:localDataTime dateTime=\"$&#123;sk.createTIme&#125;\"/&gt; --%&gt;&lt;%@ attribute name=\"dateTime\" required=\"true\" type=\"java.time.LocalDateTime\" %&gt;&lt;%@ attribute name=\"pattern\" required=\"false\" type=\"java.lang.String\" %&gt;&lt;%--首选判断日期时间转换规则是否存在,不存在给出默认的规则--%&gt;&lt;c:if test=\"$&#123;empty pattern&#125;\"&gt; &lt;c:set var=\"pattern\" value=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/c:if&gt;&lt;c:set var=\"datetime\" value=\"$&#123;dateTime&#125;\"/&gt; &lt;%-- 获取jsp页面传入的【 日期时间 】,格式为【 2017-5-26T13:59:12 】 --%&gt;&lt;c:set var=\"time\" value=\"$&#123;fn:substringAfter(datetime, 'T')&#125;\"/&gt; &lt;%-- 获取页面传过来的【时间T】后面的 【 时:分:秒 】的值 --%&gt;&lt;c:set var=\"timeLength\" value=\"$&#123;fn:length(time)&#125;\"/&gt; &lt;%-- 获取页面传来的 【 时:分:秒 的长度 】 --%&gt;&lt;c:set var=\"generalLength\" value=\"$&#123;fn:length('123456')&#125;\"/&gt; &lt;%-- 这里定义了一个【Integer】类型的值,值为字符串 【123456 】的长度 --%&gt;&lt;c:set var=\"cloneZero\" value=\":00\"/&gt; &lt;%-- 这里设置一个值为【String】的字符串, --%&gt;&lt;%-- 当 时:分:秒 不足6位的时候就说明缺少秒,我们给它自动补充 :00 --%&gt;&lt;c:if test=\"$&#123;timeLength lt generalLength&#125;\"&gt; &lt;c:set var=\"datetimeCloneZero\" value=\"$&#123;datetime&#125;$&#123;cloneZero&#125;\"/&gt; &lt;%-- 拼接页面传过来的 【 时：分 】 ,补充一个【秒数】,EL中 + 为相加,非拼接字符串 --%&gt; &lt;c:set var=\"cleandDateTime\" value=\"$&#123;fn:replace(datetimeCloneZero,'T',' ')&#125;\"/&gt; &lt;%-- 把java8日期时间中的【 T 】给去掉,换成一个空的字符串 --%&gt;&lt;/c:if&gt;&lt;%-- 当页面传过来的时间大于6位时说明时间时完整的,不进行自动填充【 :00 】,直接把日期时间中的 【 T 】 替换为空字符串 --%&gt;&lt;c:if test=\"$&#123;timeLength gt generalLength&#125;\"&gt; &lt;c:set var=\"cleandDateTime\" value=\"$&#123;fn:replace(datetime,'T',' ')&#125;\"/&gt;&lt;/c:if&gt;&lt;%-- 解析时间, type=\"BOTH\"为同时解析日期跟时间 --%&gt;&lt;fmt:parseDate value=\"$&#123;cleandDateTime&#125;\" var=\"parsedDateTime\" pattern=\"$&#123;pattern&#125;\" type=\"BOTH\"/&gt;&lt;fmt:formatDate value=\"$&#123;parsedDateTime&#125;\" pattern=\"$&#123;pattern&#125;\" type=\"BOTH\"/&gt;```- `localData.tag`的内容就比较简单了```xml&lt;%@ tag body-content=\"empty\" pageEncoding=\"UTF-8\" trimDirectiveWhitespaces=\"true\" %&gt;&lt;%@ taglib prefix=\"fmt\" uri=\"http://java.sun.com/jsp/jstl/fmt\" %&gt;&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;&lt;%@ attribute name=\"date\" required=\"true\" type=\"java.time.LocalDate\" %&gt;&lt;%@ attribute name=\"pattern\" required=\"false\" type=\"java.lang.String\" %&gt;&lt;c:if test=\"$&#123;empty pattern&#125;\"&gt; &lt;c:set var=\"pattern\" value=\"MM/dd/yyyy\"/&gt;&lt;/c:if&gt;&lt;fmt:parseDate value=\"$&#123;date&#125;\" var=\"parsedDate\" type=\"date\"/&gt;&lt;fmt:formatDate value=\"$&#123;parsedDate&#125;\" type=\"date\" pattern=\"$&#123;pattern&#125;\"/&gt;``` - 然后我们去页面导入需要的标签,然后去使用,修改`list.jsp`文件 ```jsp&lt;%@page contentType=\"text/html; charset=UTF-8\" language=\"java\" %&gt;&lt;%@include file=\"common/tag.jsp\" %&gt; &lt;%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %&gt;&lt;!DOCTYPE html&gt;&lt;html lang=\"zh-CN\"&gt;&lt;head&gt; &lt;title&gt;秒杀列表&lt;/title&gt; &lt;%@include file=\"common/head.jsp\" %&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading text-center\"&gt; &lt;h2&gt;秒杀列表&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;table class=\"table table-hover\"&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;名称&lt;/td&gt; &lt;td&gt;库存&lt;/td&gt; &lt;td&gt;开始时间&lt;/td&gt; &lt;td&gt;结束时间&lt;/td&gt; &lt;td&gt;创建时间&lt;/td&gt; &lt;td&gt;详情页&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;c:forEach items=\"$&#123;list&#125;\" var=\"sk\"&gt; &lt;tr&gt; &lt;td&gt;$&#123;sk.name&#125;&lt;/td&gt; &lt;td&gt;$&#123;sk.number&#125;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.startTime&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.endTime&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;tags:localDataTime dateTime=\"$&#123;sk.createTIme&#125;\"/&gt;&lt;/td&gt; &lt;td&gt;&lt;a class=\"btn btn-info\" href=\"/seckill/$&#123;sk.seckillId&#125;/detail\" target=\"_blank\"&gt;详情&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/jquery.js\"&gt;&lt;/script&gt;&lt;script src=\"$&#123;pageContext.request.contextPath&#125;/resources/plugins/bootstrap-3.3.0/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;/html&gt;``` 在这里我们修改了几个地方: ```jsp &lt;%@taglib prefix=\"tags\" tagdir=\"/WEB-INF/tags\" %&gt; ```然后我们的格式就应该可以正常被格式化出来了 - 建立一个模块化的`seckill.js`文件,位于`Webapp`下 `resources`下`script`文件夹下,文件内容如下: ```js/** * 模块化javaScript * Created by jianrongsun on 17-5-25. */var seckill = &#123; // 封装秒杀相关的ajax的url URL: &#123; now: function () &#123; return \"/seckill/time/now\"; &#125;, exposer: function (seckillId) &#123; return \"/seckill/\" + seckillId + \"/exposer\"; &#125;, execution: function (seckillId, md5) &#123; return \"/seckill/\" + seckillId + \"/\" + md5 + \"/execution\"; &#125; &#125;, // 验证手机号码 validatePhone: function (phone) &#123; return !!(phone &amp;&amp; phone.length === 11 &amp;&amp; !isNaN(phone)); &#125;, // 详情页秒杀业务逻辑 detail: &#123; // 详情页开始初始化 init: function (params) &#123; console.log(\"获取手机号码\"); // 手机号验证登录,计时交互 var userPhone = $.cookie('userPhone'); // 验证手机号 if (!seckill.validatePhone(userPhone)) &#123; console.log(\"未填写手机号码\"); // 验证手机控制输出 var killPhoneModal = $(\"#killPhoneModal\"); killPhoneModal.modal(&#123; show: true, // 显示弹出层 backdrop: 'static', // 静止位置关闭 keyboard: false // 关闭键盘事件 &#125;); $(\"#killPhoneBtn\").click(function () &#123; console.log(\"提交手机号码按钮被点击\"); var inputPhone = $(\"#killPhoneKey\").val(); console.log(\"inputPhone\" + inputPhone); if (seckill.validatePhone(inputPhone)) &#123; // 把电话写入cookie $.cookie('userPhone', inputPhone, &#123;expires: 7, path: '/seckill'&#125;); // 验证通过 刷新页面 window.location.reload(); &#125; else &#123; // todo 错误文案信息写到前端 $(\"#killPhoneMessage\").hide().html(\"&lt;label class='label label-danger'&gt;手机号码错误&lt;/label&gt;\").show(300); &#125; &#125;); &#125; else &#123; console.log(\"在cookie中找到了电话号码,开启计时\"); // 已经登录了就开始计时交互 var startTime = params['startTime']; var endTime = params['endTime']; var seckillId = params['seckillId']; console.log(\"开始秒杀时间=======\" + startTime); console.log(\"结束秒杀时间========\" + endTime); $.get(seckill.URL.now(), &#123;&#125;, function (result) &#123; if (result &amp;&amp; result['success']) &#123; var nowTime = seckill.convertTime(result['data']); console.log(\"服务器当前的时间==========\" + nowTime); // 进行秒杀商品的时间判断,然后计时交互 seckill.countDown(seckillId, nowTime, startTime, endTime); &#125; else &#123; console.log('结果:' + result); console.log('result' + result); &#125; &#125;); &#125; &#125; &#125;, handlerSeckill: function (seckillId, mode) &#123; // 获取秒杀地址 mode.hide().html('&lt;button class=\"btn btn-primary btn-lg\" id=\"killBtn\"&gt;开始秒杀&lt;/button&gt;'); console.debug(\"开始进行秒杀地址获取\"); $.get(seckill.URL.exposer(seckillId), &#123;&#125;, function (result) &#123; if (result &amp;&amp; result['success']) &#123; var exposer = result['data']; if (exposer['exposed']) &#123; console.log(\"有秒杀地址接口\"); // 开启秒杀,获取秒杀地址 var md5 = exposer['md5']; var killUrl = seckill.URL.execution(seckillId, md5); console.log(\"秒杀的地址为:\" + killUrl); // 绑定一次点击事件 $(\"#killBtn\").one('click', function () &#123; console.log(\"开始进行秒杀,按钮被禁用\"); // 执行秒杀请求,先禁用按钮 $(this).addClass(\"disabled\"); // 发送秒杀请求 $.post(killUrl, &#123;&#125;, function (result) &#123; var killResult = result['data']; var state = killResult['state']; var stateInfo = killResult['stateInfo']; console.log(\"秒杀状态\" + stateInfo); // 显示秒杀结果 mode.html('&lt;span class=\"label label-success\"&gt;' + stateInfo + '&lt;/span&gt;'); &#125;); &#125;); mode.show(); &#125; else &#123; console.warn(\"还没有暴露秒杀地址接口,无法进行秒杀\"); // 未开启秒杀 var now = seckill.convertTime(exposer['now']); var start = seckill.convertTime(exposer['start']); var end = seckill.convertTime(exposer['end']); console.log(\"当前时间\" + now); console.log(\"开始时间\" + start); console.log(\"结束时间\" + end); console.log(\"开始倒计时\"); console.debug(\"开始进行倒计时\"); seckill.countDown(seckillId, now, start, end); &#125; &#125; else &#123; console.error(\"服务器端查询秒杀商品详情失败\"); console.log('result' + result.valueOf()); &#125; &#125;); &#125;, countDown: function (seckillId, nowTime, startTime, endTime) &#123; console.log(\"秒杀的商品ID:\" + seckillId + \",服务器当前时间：\" + nowTime + \",开始秒杀的时间:\" + startTime + \",结束秒杀的时间\" + endTime); // 获取显示倒计时的文本域 var seckillBox = $(\"#seckill-box\"); // 获取时间戳进行时间的比较 nowTime = new Date(nowTime).valueOf(); startTime = new Date(startTime).valueOf(); endTime = new Date(endTime).valueOf(); console.log(\"转换后的Date类型当前时间戳\" + nowTime); console.log(\"转换后的Date类型开始时间戳\" + startTime); console.log(\"转换后的Date类型结束时间戳\" + endTime); if (nowTime &lt; endTime &amp;&amp; nowTime &gt; startTime) &#123; // 秒杀开始 console.log(\"秒杀可以开始,两个条件符合\"); seckill.handlerSeckill(seckillId, seckillBox); &#125; else if (nowTime &gt; endTime) &#123; alert(nowTime &gt; endTime); // console.log(nowTime + \"&gt;\" + startTime); 秒杀结束应该根据结束时间判断 console.log(nowTime + \"&gt;\" + endTime); // 秒杀结束 console.warn(\"秒杀已经结束了,当前时间为:\" + nowTime + \",秒杀结束时间为\" + endTime); seckillBox.html(\"秒杀结束\"); &#125; else &#123; console.log(\"秒杀还没开始\"); alert(nowTime &lt; startTime); // 秒杀未开启 var killTime = new Date(startTime + 1000); console.log(killTime); console.log(\"开始计时效果\"); seckillBox.countdown(killTime, function (event) &#123; // 事件格式 var format = event.strftime(\"秒杀倒计时: %D天 %H时 %M分 %S秒\"); console.log(format); seckillBox.html(format); &#125;).on('finish.countdown', function () &#123; // 事件完成后回调事件,获取秒杀地址,控制业务逻辑 console.log(\"准备执行回调,获取秒杀地址,执行秒杀\"); console.log(\"倒计时结束\"); seckill.handlerSeckill(seckillId, seckillBox); &#125;); &#125; &#125;, cloneZero: function (time) &#123; var cloneZero = \":00\"; if (time.length &lt; 6) &#123; console.warn(\"需要拼接时间\"); time = time + cloneZero; return time; &#125; else &#123; console.log(\"时间是完整的\"); return time; &#125; &#125;, convertTime: function (localDateTime) &#123; var year = localDateTime.year; var monthValue = localDateTime.monthValue; var dayOfMonth = localDateTime.dayOfMonth; var hour = localDateTime.hour; var minute = localDateTime.minute; var second = localDateTime.second; return year + \"-\" + monthValue + \"-\" + dayOfMonth + \" \" + hour + \":\" + minute + \":\" + second; &#125;&#125;;```自定义jstl标签参考资料 [stackoverflow上的资料1](https://stackoverflow.com/questions/35606551/jstl-localdatetime-format) [stackoverflow上的资料2](https://stackoverflow.com/questions/30230517/taglib-to-display-java-time-localdate-formatted) 编写完了就部署运行吧,不出意外的话就是这个样子的: ![完整的页面](/images/result_1.jpg)---### (四)Java高并发秒杀API之高并发优化#### 下载`Redis` - 下载完后解压压缩包 + 进入解压后的文件夹里面 ,执行命令 `make ` + 然后再执行`sudo make install` + 最后再启动`REdis`,启动命令为`redis-server` + 执行命令'redis-cli -p 6379'查看运行情况#### 使用`Java`操作`Redis`+ 导入操作`Redis`的`jedis`的 jar包```xml &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt;```+ 添加`protostuff-core`以及`protostuff-runtime`序列化jar包```xml &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;/dependency&gt;```+ 在`com.suny.dao`下建包`cache` + 然后建立类`RedisDao` ```java/** * 操作Redis的dao类 * Created by 孙建荣 on 17-5-27.下午4:44 */public class RedisDao &#123; private final Logger logger = LoggerFactory.getLogger(this.getClass()); private final JedisPool jedisPool; private RuntimeSchema&lt;Seckill&gt; schema = RuntimeSchema.createFrom(Seckill.class); public RedisDao(String ip, int port) &#123; jedisPool = new JedisPool(ip, port); &#125; public Seckill getSeckill(long seckillId) &#123; // redis操作业务逻辑 try (Jedis jedis = jedisPool.getResource()) &#123; String key = \"seckill:\" + seckillId; // 并没有实现内部序列化操作 //get-&gt;byte[]字节数组-&gt;反序列化&gt;Object(Seckill) // 采用自定义的方式序列化 // 缓存获取到 byte[] bytes = jedis.get(key.getBytes()); if (bytes != null) &#123; // 空对象 Seckill seckill = schema.newMessage(); ProtostuffIOUtil.mergeFrom(bytes, seckill, schema); // seckill被反序列化 return seckill; &#125; &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); &#125; return null; &#125; public String putSeckill(Seckill seckill) &#123; // set Object(Seckill) -&gt; 序列化 -&gt; byte[] try (Jedis jedis = jedisPool.getResource()) &#123; String key = \"seckill:\" + seckill.getSeckillId(); byte[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema, LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE)); // 超时缓存 int timeout=60*60; return jedis.setex(key.getBytes(), timeout, bytes); &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); &#125; return null; &#125;&#125;```+ 下一步是在在`applicationContext-dao.xml`中注入`redisDao````xml &lt;!--注入redisDao--&gt; &lt;bean id=\"redisDao\" class=\"com.suny.dao.cache.RedisDao\"&gt; &lt;!--构造方法注入值--&gt; &lt;constructor-arg index=\"0\" value=\"localhost\"/&gt; &lt;constructor-arg index=\"1\" value=\"6379\"/&gt; &lt;/bean&gt;```+ 改造`exportSeckillUrl`方法,一定要先注入`redisDao````java @Autowired private RedisDao redisDao;@Override public Exposer exportSeckillUrl(long seckillId) &#123; // 根据秒杀的ID去查询是否存在这个商品 /* Seckill seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; logger.warn(\"查询不到这个秒杀产品的记录\"); return new Exposer(false, seckillId); &#125;*/ Seckill seckill = redisDao.getSeckill(seckillId); if (seckill == null) &#123; // 访问数据库读取数据 seckill = seckillMapper.queryById(seckillId); if (seckill == null) &#123; return new Exposer(false, seckillId); &#125; else &#123; // 放入redis redisDao.putSeckill(seckill); &#125; &#125; // 判断是否还没到秒杀时间或者是过了秒杀时间 LocalDateTime startTime = seckill.getStartTime(); LocalDateTime endTime = seckill.getEndTime(); LocalDateTime nowTime = LocalDateTime.now(); // 开始时间大于现在的时候说明没有开始秒杀活动 秒杀活动结束时间小于现在的时间说明秒杀已经结束了 if (nowTime.isAfter(startTime) &amp;&amp; nowTime.isBefore(endTime)) &#123; //秒杀开启,返回秒杀商品的id,用给接口加密的md5 String md5 = getMd5(seckillId); return new Exposer(true, md5, seckillId); &#125; return new Exposer(false, seckillId, nowTime, startTime, endTime); &#125;```+ 写存储过程,然后去`Mysql`控制台执行储存过程```sql-- 秒杀执行储存过程DELIMITER $$ -- console ; 转换为$$-- 定义储存过程-- 参数： in 参数 out输出参数-- row_count() 返回上一条修改类型sql(delete,insert,update)的影响行数-- row_count:0:未修改数据 ; &gt;0:表示修改的行数； &lt;0:sql错误CREATE PROCEDURE `seckill`.`execute_seckill` (IN v_seckill_id BIGINT, IN v_phone BIGINT, IN v_kill_time TIMESTAMP, OUT r_result INT) BEGIN DECLARE insert_count INT DEFAULT 0; START TRANSACTION; INSERT IGNORE INTO success_killed (seckill_id, user_phone, create_time) VALUES (v_seckill_id, v_phone, v_kill_time); SELECT row_count() INTO insert_count; IF (insert_count = 0) THEN ROLLBACK; SET r_result = -1; ELSEIF (insert_count &lt; 0) THEN ROLLBACK; SET r_result = -2; ELSE UPDATE seckill SET number = number - 1 WHERE seckill_id = v_seckill_id AND end_time &gt; v_kill_time AND start_time &lt; v_kill_time AND number &gt; 0; SELECT row_count() INTO insert_count; IF (insert_count = 0) THEN ROLLBACK; SET r_result = 0; ELSEIF (insert_count &lt; 0) THEN ROLLBACK; SET r_result = -2; ELSE COMMIT; SET r_result = 1; END IF; END IF; END;$$-- 储存过程定义结束DELIMITER ;SET @r_result = -3;-- 执行储存过程CALL execute_seckill(1003, 13502178891, now(), @r_result);-- 获取结果SELECT @r_result;```+ 在`SeckillMapper`中编写`killProduce()`方法```java /** * 使用储存过程执行秒杀 * @param paramMap */ void killByProcedure(Map&lt;String,Object&gt; paramMap);```+ 然后在`SeckillMapper.xml`中写`sql`语句````xml&lt;!--调用储存过程--&gt; &lt;select id=\"killByProcedure\" statementType=\"CALLABLE\"&gt; CALL execute_seckill( #&#123;seckillId,jdbcType=BIGINT,mode=IN&#125;, #&#123;phone,jdbcType=BIGINT,mode=IN&#125;, #&#123;killTime,jdbcType=TIMESTAMP,mode=IN&#125;, #&#123;result,jdbcType=INTEGER,mode=OUT&#125; ) &lt;/select&gt; 下一步在SeckillService接口中中编写 killProduce()方法 1SeckillExecution executeSeckillProcedure(long seckillId,long userPhone,String md5); 导入commons-collections工具类 123456&lt;!--导入apache工具类--&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt; 然后SeckillServiceImpl实现killProduce()方法 123456789101112131415161718192021222324252627@Override public SeckillExecution executeSeckillProcedure(long seckillId, long userPhone, String md5) &#123; if (md5 == null || !md5.equals(getMd5(seckillId))) &#123; return new SeckillExecution(seckillId, SeckillStatEnum.DATE_REWRITE); &#125; LocalDateTime killTime = LocalDateTime.now(); Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put(\"seckillId\", seckillId); map.put(\"phone\", userPhone); map.put(\"killTime\", killTime); map.put(\"result\", null); // 执行储存过程,result被复制 try &#123; seckillMapper.killByProcedure(map); // 获取result int result = MapUtils.getInteger(map, \"result\", -2); if (result == 1) &#123; SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone); return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled); &#125; else &#123; return new SeckillExecution(seckillId, SeckillStatEnum.stateOf(result)); &#125; &#125; catch (Exception e) &#123; logger.error(e.getMessage(), e); return new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); &#125; &#125; 改造执行秒杀executeSeckill方法,减少一道虚拟机GC程序,优化性能 12345678910111213141516171819202122232425262728293031323334@Transactional @Override public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5) throws SeckillException &#123; if (md5 == null || !md5.equals(getMd5(seckillId))) &#123; logger.error(\"秒杀数据被篡改\"); throw new SeckillException(\"seckill data rewrite\"); &#125; // 执行秒杀业务逻辑 LocalDateTime nowTIme = LocalDateTime.now(); try &#123; // 记录购买行为 int insertCount = successKilledMapper.insertSuccessKilled(seckillId, userPhone); if (insertCount &lt;= 0) &#123; // 重复秒杀 throw new RepeatKillException(\"seckill repeated\"); &#125; else &#123; // 减库存 ,热点商品的竞争 int reduceNumber = seckillMapper.reduceNumber(seckillId, nowTIme); if (reduceNumber &lt;= 0) &#123; logger.warn(\"没有更新数据库记录,说明秒杀结束\"); throw new SeckillCloseException(\"seckill is closed\"); &#125; else &#123; // 秒杀成功了,返回那条插入成功秒杀的信息 进行commit SuccessKilled successKilled = successKilledMapper.queryByIdWithSeckill(seckillId, userPhone); return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled); &#125; &#125; &#125; catch (SeckillCloseException | RepeatKillException e1) &#123; throw e1; &#125; &#125; 编写SeckillServiceImpl中的killProduce()方法的测试方法 123456789101112@Test public void executeSeckillProcedureTest() &#123; long seckillId = 1001; long phone = 1368011101; Exposer exposer = seckillService.exportSeckillUrl(seckillId); if (exposer.isExposed()) &#123; String md5 = exposer.getMd5(); SeckillExecution execution = seckillService.executeSeckillProcedure(seckillId, phone, md5); System.out.println(execution.getStateInfo()); &#125; &#125; 改造SeckillController中的execute方法调用,把一开始调用普通方法的改成调用储存过程的那个方法 12345678910111213141516171819202122232425262728293031 @RequestMapping(value = \"/&#123;seckillId&#125;/&#123;md5&#125;/execution\", method = RequestMethod.POST) @ResponseBody public SeckillResult&lt;SeckillExecution&gt; execute(@PathVariable(\"seckillId\") long seckillId, @PathVariable(\"md5\") String md5, @CookieValue(value = \"userPhone\", required = false) Long userPhone) &#123; // 如果用户的手机号码为空的说明没有填写手机号码进行秒杀 if (userPhone == null) &#123; return new SeckillResult&lt;&gt;(false, \"没有注册\"); &#125; // 根据用户的手机号码,``秒杀商品的id跟md5进行秒杀商品,没异常就是秒杀成功 try &#123; // 这里换成储存过程// SeckillExecution execution = seckillService.executeSeckill(seckillId, userPhone, md5); SeckillExecution execution = seckillService.executeSeckillProcedure(seckillId, userPhone, md5); return new SeckillResult&lt;&gt;(true, execution); &#125; catch (RepeatKillException e1) &#123; // 重复秒杀 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.REPEAT_KILL); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillCloseException e2) &#123; // 秒杀关闭 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.END); return new SeckillResult&lt;&gt;(false, execution); &#125; catch (SeckillException e) &#123; // 不能判断的异常 SeckillExecution execution = new SeckillExecution(seckillId, SeckillStatEnum.INNER_ERROR); return new SeckillResult&lt;&gt;(false, execution); &#125; // 如果有异常就是秒杀失败 &#125; 写在最后 整个项目的流程是我在看视频的过程中,每当有一个知识点的时候我就在笔记里面记录一个知识点的标题.然后在写详细过程的时候就是根据标题的顺序来进行回忆的,在遇到不是很记得到的地方我也会反过头去看下视频里面的流程,可能会有一些小问题存在.如果项目流程总结中有什么问题欢迎发Issue给我,或者您也可以直接联系我sunybyjava@gmail.com 感谢您的阅读","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-26T03:27:55.302Z","updated":"2018-11-26T03:27:55.302Z","comments":true,"path":"2018/11/26/hello-world/","link":"","permalink":"http://yoursite.com/2018/11/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}